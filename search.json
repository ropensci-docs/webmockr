[{"path":[]},{"path":"https://docs.ropensci.org/webmockr/CONTRIBUTING.html","id":"bugs","dir":"","previous_headings":"","what":"Bugs?","title":"CONTRIBUTING","text":"Submit issue Issues page","code":""},{"path":"https://docs.ropensci.org/webmockr/CONTRIBUTING.html","id":"code-contributions","dir":"","previous_headings":"","what":"Code contributions","title":"CONTRIBUTING","text":"Fork repo Github account Clone version account machine account, e.g,. git clone https://github.com/<yourgithubusername>/webmockr.git Make sure track progress upstream (.e., version webmockr ropensci/webmockr) git remote add upstream https://github.com/ropensci/webmockr.git. making changes make sure pull changes upstream either git fetch upstream merge later git pull upstream fetch merge one step Make changes (bonus points making changes new feature branch) Please write test(s) changes affect code just docs Push account Submit pull request home base ropensci/webmockr","code":""},{"path":[]},{"path":"https://docs.ropensci.org/webmockr/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2022 Scott Chamberlain Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://docs.ropensci.org/webmockr/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Scott Chamberlain. Author, maintainer. Aaron Wolen. Contributor. . Funder.           https://ropensci.org","code":""},{"path":"https://docs.ropensci.org/webmockr/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Chamberlain S (2024). webmockr: Stubbing Setting Expectations 'HTTP' Requests. R package version 1.0.2.91, https://books.ropensci.org/http-testing/, https://docs.ropensci.org/webmockr/, https://github.com/ropensci/webmockr.","code":"@Manual{,   title = {webmockr: Stubbing and Setting Expectations on 'HTTP' Requests},   author = {Scott Chamberlain},   year = {2024},   note = {R package version 1.0.2.91,     https://books.ropensci.org/http-testing/,     https://docs.ropensci.org/webmockr/},   url = {https://github.com/ropensci/webmockr}, }"},{"path":"https://docs.ropensci.org/webmockr/index.html","id":"webmockr","dir":"","previous_headings":"","what":"Stubbing and Setting Expectations on HTTP Requests","title":"Stubbing and Setting Expectations on HTTP Requests","text":"R library stubbing setting expectations HTTP requests. Port Ruby gem webmock  short version : webmockr helps stub HTTP requests don’t repeat . details tell webmockr HTTP request want match sees request matching criteria doesn’t actually HTTP request. Instead, gives back object gotten back real request, bits knows . example, can’t give back actual data ’d get real HTTP request request wasn’t performed. addition, set expectation webmockr return, return . example, expect request return 418 error (’m Teapot), ’s ’ll get. can match HTTP method (required) Plus single combination following: Right now, can match directly URI’s, regex URI patterns. Eventually, support RFC 6570 URI templates. normalize URI paths URL encoded things match URL un-encoded things (e.g. hello world hello%20world) normalize query parameter values URL encoded things match URL un-encoded things (e.g. message = hello world message = hello%20world) list(H1 = \"value1\", content_length = 123, X_CuStOm_hEAder = \"foo\") list(h1 = \"value1\", \"Content-Length\" = 123, \"x-cuSTOM-HeAder\" = \"foo\") Request body Real HTTP requests ’s scenarios think using webmockr: webmockr loaded turned . point webmockr doesn’t change anythning. turn webmockr like webmockr now default allow real HTTP requests http libraries adapters loaded (right now crul). can optionally allow real requests via webmockr_allow_net_connect(), disallow real requests via webmockr_disable_net_connect(). can check whether allowing real requests webmockr_net_connect_allowed(). Certain kinds real HTTP requests allowed: don’t suppoprt yet, can allow localhost HTTP requests allow_localhost parameter webmockr_configure() function. Storing actual HTTP responses webmockr doesn’t . Check vcr","code":"library(webmockr) webmockr::enable()"},{"path":"https://docs.ropensci.org/webmockr/index.html","id":"features","dir":"","previous_headings":"","what":"Features","title":"Stubbing and Setting Expectations on HTTP Requests","text":"Stubbing HTTP requests low http client lib level Setting verifying expectations HTTP requests Matching requests based method, URI, headers body Support testthat via vcr Can used testing outside testing context Supports async http request mocking crul ","code":""},{"path":"https://docs.ropensci.org/webmockr/index.html","id":"supported-http-libraries","dir":"","previous_headings":"","what":"Supported HTTP libraries","title":"Stubbing and Setting Expectations on HTTP Requests","text":"crul httr httr2","code":""},{"path":"https://docs.ropensci.org/webmockr/index.html","id":"install","dir":"","previous_headings":"","what":"Install","title":"Stubbing and Setting Expectations on HTTP Requests","text":"cran Dev version","code":"install.packages(\"webmockr\") # install.packages(\"pak\") pak::pak(\"ropensci/webmockr\") library(webmockr)"},{"path":"https://docs.ropensci.org/webmockr/index.html","id":"enable-webmockr","dir":"","previous_headings":"","what":"Enable webmockr","title":"Stubbing and Setting Expectations on HTTP Requests","text":"","code":"webmockr::enable() #> CrulAdapter enabled! #> HttrAdapter enabled! #> Httr2Adapter enabled!"},{"path":"https://docs.ropensci.org/webmockr/index.html","id":"inside-a-test-framework","dir":"","previous_headings":"","what":"Inside a test framework","title":"Stubbing and Setting Expectations on HTTP Requests","text":"","code":"library(crul) library(testthat)  # make a stub stub_request(\"get\", \"https://httpbin.org/get\") %>%    to_return(body = \"success!\", status = 200) #> <webmockr stub>  #>   method: get #>   uri: https://httpbin.org/get #>   with:  #>     query:  #>     body:  #>     request_headers:  #>   to_return:  #>   - status: 200 #>     body: success! #>     response_headers:  #>     should_timeout: FALSE #>     should_raise: FALSE  # check that it's in the stub registry stub_registry() #> <webmockr stub registry>  #>  Registered Stubs #>    GET: https://httpbin.org/get    | to_return:   with body \"success!\"  with status 200  # make the request z <- crul::HttpClient$new(url = \"https://httpbin.org\")$get(\"get\")  # run tests (nothing returned means it passed) expect_is(z, \"HttpResponse\") expect_equal(z$status_code, 200) expect_equal(z$parse(\"UTF-8\"), \"success!\")"},{"path":"https://docs.ropensci.org/webmockr/index.html","id":"outside-a-test-framework","dir":"","previous_headings":"","what":"Outside a test framework","title":"Stubbing and Setting Expectations on HTTP Requests","text":"","code":"library(crul)"},{"path":"https://docs.ropensci.org/webmockr/index.html","id":"stubbed-request-based-on-uri-only-and-with-the-default-response","dir":"","previous_headings":"Outside a test framework","what":"Stubbed request based on uri only and with the default response","title":"Stubbing and Setting Expectations on HTTP Requests","text":"set return objects","code":"stub_request(\"get\", \"https://httpbin.org/get\") #> <webmockr stub>  #>   method: get #>   uri: https://httpbin.org/get #>   with:  #>     query:  #>     body:  #>     request_headers:  #>   to_return: x <- HttpClient$new(url = \"https://httpbin.org\") x$get('get') #> <crul response>  #>   url: https://httpbin.org/get #>   request_headers:  #>     User-Agent: libcurl/8.7.1 r-curl/5.2.1 crul/1.5.0 #>     Accept-Encoding: gzip, deflate #>     Accept: application/json, text/xml, application/xml, */* #>   response_headers:  #>   status: 200 stub_request(\"get\", \"https://httpbin.org/get\") %>%   wi_th(     query = list(hello = \"world\")) %>%     to_return(status = 418) #> <webmockr stub>  #>   method: get #>   uri: https://httpbin.org/get #>   with:  #>     query: hello=world #>     body:  #>     request_headers:  #>   to_return:  #>   - status: 418 #>     body:  #>     response_headers:  #>     should_timeout: FALSE #>     should_raise: FALSE x$get('get', query = list(hello = \"world\")) #> <crul response>  #>   url: https://httpbin.org/get #>   request_headers:  #>     User-Agent: libcurl/8.7.1 r-curl/5.2.1 crul/1.5.0 #>     Accept-Encoding: gzip, deflate #>     Accept: application/json, text/xml, application/xml, */* #>   response_headers:  #>   status: 418"},{"path":"https://docs.ropensci.org/webmockr/index.html","id":"stubbing-requests-based-on-method-uri-and-query-params","dir":"","previous_headings":"Outside a test framework","what":"Stubbing requests based on method, uri and query params","title":"Stubbing and Setting Expectations on HTTP Requests","text":"","code":"stub_request(\"get\", \"https://httpbin.org/get\") %>%   wi_th(query = list(hello = \"world\"),          headers = list('User-Agent' = 'libcurl/7.51.0 r-curl/2.6 crul/0.3.6',                         'Accept-Encoding' = \"gzip, deflate\")) #> <webmockr stub>  #>   method: get #>   uri: https://httpbin.org/get #>   with:  #>     query: hello=world #>     body:  #>     request_headers: User-Agent=libcurl/7.51.0 r-cur..., Accept-Encoding=gzip, deflate #>   to_return: stub_registry() #> <webmockr stub registry>  #>  Registered Stubs #>    GET: https://httpbin.org/get  #>    GET: https://httpbin.org/get  with query params hello=world   | to_return:    with status 418  #>    GET: https://httpbin.org/get  with query params hello=world   with headers {\"User-Agent\":\"libcurl/7.51.0 r-curl/2.6 crul/0.3.6\",\"Accept-Encoding\":\"gzip, deflate\"} x <- HttpClient$new(url = \"https://httpbin.org\") x$get('get', query = list(hello = \"world\")) #> <crul response>  #>   url: https://httpbin.org/get #>   request_headers:  #>     User-Agent: libcurl/8.7.1 r-curl/5.2.1 crul/1.5.0 #>     Accept-Encoding: gzip, deflate #>     Accept: application/json, text/xml, application/xml, */* #>   response_headers:  #>   status: 418"},{"path":"https://docs.ropensci.org/webmockr/index.html","id":"stubbing-requests-and-set-expectation-of-a-timeout","dir":"","previous_headings":"Outside a test framework","what":"Stubbing requests and set expectation of a timeout","title":"Stubbing and Setting Expectations on HTTP Requests","text":"","code":"stub_request(\"post\", \"https://httpbin.org/post\") %>% to_timeout() #> <webmockr stub>  #>   method: post #>   uri: https://httpbin.org/post #>   with:  #>     query:  #>     body:  #>     request_headers:  #>   to_return:  #>   - status:  #>     body:  #>     response_headers:  #>     should_timeout: TRUE #>     should_raise: FALSE x <- HttpClient$new(url = \"https://httpbin.org\") x$post('post') #> Error: Request Timeout (HTTP 408). #>  - The client did not produce a request within the time that the server was prepared to wait. The client MAY repeat the request without modifications at any later time."},{"path":"https://docs.ropensci.org/webmockr/index.html","id":"stubbing-requests-and-set-http-error-expectation","dir":"","previous_headings":"Outside a test framework","what":"Stubbing requests and set HTTP error expectation","title":"Stubbing and Setting Expectations on HTTP Requests","text":"","code":"library(fauxpas) stub_request(\"get\", \"https://httpbin.org/get?a=b\") %>% to_raise(HTTPBadRequest) #> <webmockr stub>  #>   method: get #>   uri: https://httpbin.org/get?a=b #>   with:  #>     query:  #>     body:  #>     request_headers:  #>   to_return:  #>   - status:  #>     body:  #>     response_headers:  #>     should_timeout: FALSE #>     should_raise: HTTPBadRequest x <- HttpClient$new(url = \"https://httpbin.org\") x$get('get', query = list(a = \"b\")) #> Error: Bad Request (HTTP 400). #>  - The request could not be understood by the server due to malformed syntax. The client SHOULD NOT repeat the request without modifications."},{"path":"https://docs.ropensci.org/webmockr/index.html","id":"httr-integration","dir":"","previous_headings":"","what":"httr integration","title":"Stubbing and Setting Expectations on HTTP Requests","text":"make stub now returns mocked response","code":"library(webmockr) library(httr) #>  #> Attaching package: 'httr' #> The following object is masked from 'package:crul': #>  #>     handle  # turn on httr mocking httr_mock() # no stub found GET(\"https://httpbin.org/get\") #> Error: Real HTTP connections are disabled. #> Unregistered request: #>   GET https://httpbin.org/get   with headers {Accept: application/json, text/xml, application/xml, */*} #>  #> You can stub this request with the following snippet: #>  #>    stub_request('get', uri = 'https://httpbin.org/get') %>% #>      wi_th( #>        headers = list('Accept' = 'application/json, text/xml, application/xml, */*') #>      ) #> ============================================================ stub_request('get', uri = 'https://httpbin.org/get') %>%   wi_th(     headers = list('Accept' = 'application/json, text/xml, application/xml, */*')   ) %>%   to_return(status = 418, body = \"I'm a teapot!!!\", headers = list(im_a = \"teapot\")) #> <webmockr stub>  #>   method: get #>   uri: https://httpbin.org/get #>   with:  #>     query:  #>     body:  #>     request_headers: Accept=application/json, te... #>   to_return:  #>   - status: 418 #>     body: I'm a teapot!!! #>     response_headers: im_a=teapot #>     should_timeout: FALSE #>     should_raise: FALSE (res <- GET(\"https://httpbin.org/get\")) res$status_code #> [1] 418 res$headers #> $im_a #> [1] \"teapot\""},{"path":"https://docs.ropensci.org/webmockr/index.html","id":"httr2-integration","dir":"","previous_headings":"","what":"httr2 integration","title":"Stubbing and Setting Expectations on HTTP Requests","text":"make stub now returns mocked response","code":"library(webmockr) library(httr2)  # turn on httr2 mocking enable() # no stub found req <- request(\"https://hb.opencpu.org/get\") req_perform(req) #> Error: Real HTTP connections are disabled. #> Unregistered request: #>   GET https://hb.opencpu.org/get #>  #> You can stub this request with the following snippet: #>  #>    stub_request('get', uri = 'https://hb.opencpu.org/get') #> ============================================================ stub_request('get', uri = 'https://hb.opencpu.org/get') %>%   to_return(status = 418, body = \"I'm a teapot!!!\", headers = list(im_a = \"teapot\")) #> <webmockr stub>  #>   method: get #>   uri: https://hb.opencpu.org/get #>   with:  #>     query:  #>     body:  #>     request_headers:  #>   to_return:  #>   - status: 418 #>     body: I'm a teapot!!! #>     response_headers: im_a=teapot #>     should_timeout: FALSE #>     should_raise: FALSE req <- request(\"https://hb.opencpu.org/get\") res <- req_perform(req) res res$status_code #> [1] 418 res$headers #> <httr2_headers/list> #> im_a: teapot"},{"path":"https://docs.ropensci.org/webmockr/index.html","id":"writing-to-disk","dir":"","previous_headings":"","what":"Writing to disk","title":"Stubbing and Setting Expectations on HTTP Requests","text":"Write file mocked request - can use mock_file() webmockr handle file contents Writing disk supported crul, httr, httr2","code":"## make a temp file f <- tempfile(fileext = \".json\") ## write something to the file cat(\"{\\\"hello\\\":\\\"world\\\"}\\n\", file = f) readLines(f) #> [1] \"{\\\"hello\\\":\\\"world\\\"}\" ## make the stub invisible(stub_request(\"get\", \"https://httpbin.org/get\") %>%    to_return(body = file(f))) ## make a request out <- HttpClient$new(\"https://httpbin.org/get\")$get(disk = f) readLines(file(f)) #> [1] \"{\\\"hello\\\":\\\"world\\\"}\" g <- tempfile(fileext = \".json\") ## make the stub invisible(stub_request(\"get\", \"https://httpbin.org/get\") %>%    to_return(body = mock_file(g, \"{\\\"hello\\\":\\\"mars\\\"}\\n\"))) ## make a request out <- crul::HttpClient$new(\"https://httpbin.org/get\")$get(disk = g) readLines(out$content) #> [1] \"{\\\"hello\\\":\\\"world\\\"}\""},{"path":"https://docs.ropensci.org/webmockr/index.html","id":"many-requests-in-a-row","dir":"","previous_headings":"","what":"Many requests in a row","title":"Stubbing and Setting Expectations on HTTP Requests","text":"e.g., many redirects, final successful request Note subsequent requests past number responses given to_return()/etc. simply gives last response specified. Although set to_timeout to_raise feature won’t happen since fail .","code":"webmockr::enable() library(crul) library(fauxpas)  z <- stub_request(\"get\", \"https://httpbin.org/get\") to_return(z, status = 200, body = \"foobar\", headers = list(a = 5)) to_return(z, status = 200, body = \"bears\", headers = list(b = 6)) to_raise(z, HTTPBadRequest) z  con <- crul::HttpClient$new(url = \"https://httpbin.org\") # the first to_return() first <- con$get(\"get\") first first$parse(\"UTF-8\") # the second to_return() second <- con$get(\"get\") second second$parse(\"UTF-8\") # the third to_return() - fails as specified third <- con$get(\"get\")"},{"path":"https://docs.ropensci.org/webmockr/index.html","id":"contributors","dir":"","previous_headings":"","what":"Contributors","title":"Stubbing and Setting Expectations on HTTP Requests","text":"Scott Chamberlain Aaron Wolen","code":""},{"path":"https://docs.ropensci.org/webmockr/index.html","id":"meta","dir":"","previous_headings":"","what":"Meta","title":"Stubbing and Setting Expectations on HTTP Requests","text":"Please report issues bugs. License: MIT Get citation information webmockr R citation(package = 'webmockr') Please note package released Contributor Code Conduct. contributing project, agree abide terms.","code":""},{"path":"https://docs.ropensci.org/webmockr/reference/Adapter.html","id":null,"dir":"Reference","previous_headings":"","what":"Adapters for Modifying HTTP Requests — CrulAdapter","title":"Adapters for Modifying HTTP Requests — CrulAdapter","text":"Adapter base parent class used implement webmockr support different HTTP clients. used directly. Instead, use one client-specific adapters webmockr currently provides: CrulAdapter crul HttrAdapter httr Httr2Adapter httr2","code":""},{"path":"https://docs.ropensci.org/webmockr/reference/Adapter.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Adapters for Modifying HTTP Requests — CrulAdapter","text":"Note documented fields methods across client-specific adapters.","code":""},{"path":"https://docs.ropensci.org/webmockr/reference/Adapter.html","id":"super-class","dir":"Reference","previous_headings":"","what":"Super class","title":"Adapters for Modifying HTTP Requests — CrulAdapter","text":"webmockr::Adapter -> CrulAdapter","code":""},{"path":"https://docs.ropensci.org/webmockr/reference/Adapter.html","id":"public-fields","dir":"Reference","previous_headings":"","what":"Public fields","title":"Adapters for Modifying HTTP Requests — CrulAdapter","text":"client HTTP client package name name adapter name","code":""},{"path":"https://docs.ropensci.org/webmockr/reference/Adapter.html","id":"methods","dir":"Reference","previous_headings":"","what":"Methods","title":"Adapters for Modifying HTTP Requests — CrulAdapter","text":"webmockr::Adapter$disable() webmockr::Adapter$enable() webmockr::Adapter$handle_request() webmockr::Adapter$initialize() webmockr::Adapter$remove_stubs()","code":""},{"path":"https://docs.ropensci.org/webmockr/reference/Adapter.html","id":"public-methods","dir":"Reference","previous_headings":"","what":"Public methods","title":"Adapters for Modifying HTTP Requests — CrulAdapter","text":"CrulAdapter$clone()","code":""},{"path":"https://docs.ropensci.org/webmockr/reference/Adapter.html","id":"method-clone-","dir":"Reference","previous_headings":"","what":"Method clone()","title":"Adapters for Modifying HTTP Requests — CrulAdapter","text":"objects class cloneable method.","code":""},{"path":"https://docs.ropensci.org/webmockr/reference/Adapter.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Adapters for Modifying HTTP Requests — CrulAdapter","text":"","code":"CrulAdapter$clone(deep = FALSE)"},{"path":"https://docs.ropensci.org/webmockr/reference/Adapter.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Adapters for Modifying HTTP Requests — CrulAdapter","text":"deep Whether make deep clone.","code":""},{"path":"https://docs.ropensci.org/webmockr/reference/Adapter.html","id":"super-class-1","dir":"Reference","previous_headings":"","what":"Super class","title":"Adapters for Modifying HTTP Requests — CrulAdapter","text":"webmockr::Adapter -> HttrAdapter","code":""},{"path":"https://docs.ropensci.org/webmockr/reference/Adapter.html","id":"public-fields-1","dir":"Reference","previous_headings":"","what":"Public fields","title":"Adapters for Modifying HTTP Requests — CrulAdapter","text":"client HTTP client package name name adapter name","code":""},{"path":"https://docs.ropensci.org/webmockr/reference/Adapter.html","id":"methods-1","dir":"Reference","previous_headings":"","what":"Methods","title":"Adapters for Modifying HTTP Requests — CrulAdapter","text":"webmockr::Adapter$disable() webmockr::Adapter$enable() webmockr::Adapter$handle_request() webmockr::Adapter$initialize() webmockr::Adapter$remove_stubs()","code":""},{"path":"https://docs.ropensci.org/webmockr/reference/Adapter.html","id":"public-methods-1","dir":"Reference","previous_headings":"","what":"Public methods","title":"Adapters for Modifying HTTP Requests — CrulAdapter","text":"HttrAdapter$clone()","code":""},{"path":"https://docs.ropensci.org/webmockr/reference/Adapter.html","id":"method-clone--1","dir":"Reference","previous_headings":"","what":"Method clone()","title":"Adapters for Modifying HTTP Requests — CrulAdapter","text":"objects class cloneable method.","code":""},{"path":"https://docs.ropensci.org/webmockr/reference/Adapter.html","id":"usage-1","dir":"Reference","previous_headings":"","what":"Usage","title":"Adapters for Modifying HTTP Requests — CrulAdapter","text":"","code":"HttrAdapter$clone(deep = FALSE)"},{"path":"https://docs.ropensci.org/webmockr/reference/Adapter.html","id":"arguments-1","dir":"Reference","previous_headings":"","what":"Arguments","title":"Adapters for Modifying HTTP Requests — CrulAdapter","text":"deep Whether make deep clone.","code":""},{"path":"https://docs.ropensci.org/webmockr/reference/Adapter.html","id":"super-class-2","dir":"Reference","previous_headings":"","what":"Super class","title":"Adapters for Modifying HTTP Requests — CrulAdapter","text":"webmockr::Adapter -> Httr2Adapter","code":""},{"path":"https://docs.ropensci.org/webmockr/reference/Adapter.html","id":"public-fields-2","dir":"Reference","previous_headings":"","what":"Public fields","title":"Adapters for Modifying HTTP Requests — CrulAdapter","text":"client HTTP client package name name adapter name","code":""},{"path":"https://docs.ropensci.org/webmockr/reference/Adapter.html","id":"methods-2","dir":"Reference","previous_headings":"","what":"Methods","title":"Adapters for Modifying HTTP Requests — CrulAdapter","text":"webmockr::Adapter$disable() webmockr::Adapter$enable() webmockr::Adapter$handle_request() webmockr::Adapter$initialize() webmockr::Adapter$remove_stubs()","code":""},{"path":"https://docs.ropensci.org/webmockr/reference/Adapter.html","id":"public-methods-2","dir":"Reference","previous_headings":"","what":"Public methods","title":"Adapters for Modifying HTTP Requests — CrulAdapter","text":"Httr2Adapter$clone()","code":""},{"path":"https://docs.ropensci.org/webmockr/reference/Adapter.html","id":"method-clone--2","dir":"Reference","previous_headings":"","what":"Method clone()","title":"Adapters for Modifying HTTP Requests — CrulAdapter","text":"objects class cloneable method.","code":""},{"path":"https://docs.ropensci.org/webmockr/reference/Adapter.html","id":"usage-2","dir":"Reference","previous_headings":"","what":"Usage","title":"Adapters for Modifying HTTP Requests — CrulAdapter","text":"","code":"Httr2Adapter$clone(deep = FALSE)"},{"path":"https://docs.ropensci.org/webmockr/reference/Adapter.html","id":"arguments-2","dir":"Reference","previous_headings":"","what":"Arguments","title":"Adapters for Modifying HTTP Requests — CrulAdapter","text":"deep Whether make deep clone.","code":""},{"path":"https://docs.ropensci.org/webmockr/reference/Adapter.html","id":"public-fields-3","dir":"Reference","previous_headings":"","what":"Public fields","title":"Adapters for Modifying HTTP Requests — CrulAdapter","text":"client HTTP client package name name adapter name","code":""},{"path":[]},{"path":"https://docs.ropensci.org/webmockr/reference/Adapter.html","id":"public-methods-3","dir":"Reference","previous_headings":"","what":"Public methods","title":"Adapters for Modifying HTTP Requests — CrulAdapter","text":"Adapter$new() Adapter$enable() Adapter$disable() Adapter$handle_request() Adapter$remove_stubs() Adapter$clone()","code":""},{"path":"https://docs.ropensci.org/webmockr/reference/Adapter.html","id":"method-new-","dir":"Reference","previous_headings":"","what":"Method new()","title":"Adapters for Modifying HTTP Requests — CrulAdapter","text":"Create new Adapter object","code":""},{"path":"https://docs.ropensci.org/webmockr/reference/Adapter.html","id":"usage-3","dir":"Reference","previous_headings":"","what":"Usage","title":"Adapters for Modifying HTTP Requests — CrulAdapter","text":"","code":"Adapter$new()"},{"path":"https://docs.ropensci.org/webmockr/reference/Adapter.html","id":"method-enable-","dir":"Reference","previous_headings":"","what":"Method enable()","title":"Adapters for Modifying HTTP Requests — CrulAdapter","text":"Enable adapter","code":""},{"path":"https://docs.ropensci.org/webmockr/reference/Adapter.html","id":"usage-4","dir":"Reference","previous_headings":"","what":"Usage","title":"Adapters for Modifying HTTP Requests — CrulAdapter","text":"","code":"Adapter$enable(quiet = FALSE)"},{"path":"https://docs.ropensci.org/webmockr/reference/Adapter.html","id":"arguments-3","dir":"Reference","previous_headings":"","what":"Arguments","title":"Adapters for Modifying HTTP Requests — CrulAdapter","text":"quiet (logical) suppress messages? default: FALSE","code":""},{"path":"https://docs.ropensci.org/webmockr/reference/Adapter.html","id":"returns","dir":"Reference","previous_headings":"","what":"Returns","title":"Adapters for Modifying HTTP Requests — CrulAdapter","text":"TRUE, invisibly","code":""},{"path":"https://docs.ropensci.org/webmockr/reference/Adapter.html","id":"method-disable-","dir":"Reference","previous_headings":"","what":"Method disable()","title":"Adapters for Modifying HTTP Requests — CrulAdapter","text":"Disable adapter","code":""},{"path":"https://docs.ropensci.org/webmockr/reference/Adapter.html","id":"usage-5","dir":"Reference","previous_headings":"","what":"Usage","title":"Adapters for Modifying HTTP Requests — CrulAdapter","text":"","code":"Adapter$disable(quiet = FALSE)"},{"path":"https://docs.ropensci.org/webmockr/reference/Adapter.html","id":"arguments-4","dir":"Reference","previous_headings":"","what":"Arguments","title":"Adapters for Modifying HTTP Requests — CrulAdapter","text":"quiet (logical) suppress messages? default: FALSE","code":""},{"path":"https://docs.ropensci.org/webmockr/reference/Adapter.html","id":"returns-1","dir":"Reference","previous_headings":"","what":"Returns","title":"Adapters for Modifying HTTP Requests — CrulAdapter","text":"FALSE, invisibly","code":""},{"path":"https://docs.ropensci.org/webmockr/reference/Adapter.html","id":"method-handle-request-","dir":"Reference","previous_headings":"","what":"Method handle_request()","title":"Adapters for Modifying HTTP Requests — CrulAdapter","text":"logic handling request","code":""},{"path":"https://docs.ropensci.org/webmockr/reference/Adapter.html","id":"usage-6","dir":"Reference","previous_headings":"","what":"Usage","title":"Adapters for Modifying HTTP Requests — CrulAdapter","text":"","code":"Adapter$handle_request(req)"},{"path":"https://docs.ropensci.org/webmockr/reference/Adapter.html","id":"arguments-5","dir":"Reference","previous_headings":"","what":"Arguments","title":"Adapters for Modifying HTTP Requests — CrulAdapter","text":"req request","code":""},{"path":"https://docs.ropensci.org/webmockr/reference/Adapter.html","id":"returns-2","dir":"Reference","previous_headings":"","what":"Returns","title":"Adapters for Modifying HTTP Requests — CrulAdapter","text":"various outcomes","code":""},{"path":"https://docs.ropensci.org/webmockr/reference/Adapter.html","id":"method-remove-stubs-","dir":"Reference","previous_headings":"","what":"Method remove_stubs()","title":"Adapters for Modifying HTTP Requests — CrulAdapter","text":"Remove stubs","code":""},{"path":"https://docs.ropensci.org/webmockr/reference/Adapter.html","id":"usage-7","dir":"Reference","previous_headings":"","what":"Usage","title":"Adapters for Modifying HTTP Requests — CrulAdapter","text":"","code":"Adapter$remove_stubs()"},{"path":"https://docs.ropensci.org/webmockr/reference/Adapter.html","id":"returns-3","dir":"Reference","previous_headings":"","what":"Returns","title":"Adapters for Modifying HTTP Requests — CrulAdapter","text":"nothing returned; removes request stubs","code":""},{"path":"https://docs.ropensci.org/webmockr/reference/Adapter.html","id":"method-clone--3","dir":"Reference","previous_headings":"","what":"Method clone()","title":"Adapters for Modifying HTTP Requests — CrulAdapter","text":"objects class cloneable method.","code":""},{"path":"https://docs.ropensci.org/webmockr/reference/Adapter.html","id":"usage-8","dir":"Reference","previous_headings":"","what":"Usage","title":"Adapters for Modifying HTTP Requests — CrulAdapter","text":"","code":"Adapter$clone(deep = FALSE)"},{"path":"https://docs.ropensci.org/webmockr/reference/Adapter.html","id":"arguments-6","dir":"Reference","previous_headings":"","what":"Arguments","title":"Adapters for Modifying HTTP Requests — CrulAdapter","text":"deep Whether make deep clone.","code":""},{"path":"https://docs.ropensci.org/webmockr/reference/Adapter.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Adapters for Modifying HTTP Requests — CrulAdapter","text":"","code":"if (FALSE) { # \\dontrun{ if (requireNamespace(\"httr\", quietly = TRUE)) { # library(httr)  # normal httr request, works fine # real <- GET(\"https://httpbin.org/get\") # real  # with webmockr # library(webmockr) ## turn on httr mocking # httr_mock() ## now this request isn't allowed # GET(\"https://httpbin.org/get\") ## stub the request # stub_request('get', uri = 'https://httpbin.org/get') %>% #   wi_th( #     headers = list('Accept' = 'application/json, text/xml, application/xml, */*') #   ) %>% #   to_return(status = 418, body = \"I'm a teapot!\", headers = list(a = 5)) ## now the request succeeds and returns a mocked response # (res <- GET(\"https://httpbin.org/get\")) # res$status_code # rawToChar(res$content)  # allow real requests while webmockr is loaded # webmockr_allow_net_connect() # webmockr_net_connect_allowed() # GET(\"https://httpbin.org/get?animal=chicken\") # webmockr_disable_net_connect() # webmockr_net_connect_allowed() # GET(\"https://httpbin.org/get?animal=chicken\")  # httr_mock(FALSE) } } # }"},{"path":"https://docs.ropensci.org/webmockr/reference/BodyPattern.html","id":null,"dir":"Reference","previous_headings":"","what":"BodyPattern — BodyPattern","title":"BodyPattern — BodyPattern","text":"body matcher","code":""},{"path":"https://docs.ropensci.org/webmockr/reference/BodyPattern.html","id":"public-fields","dir":"Reference","previous_headings":"","what":"Public fields","title":"BodyPattern — BodyPattern","text":"pattern list partial bool, default: FALSE partial_type string, default: NULL","code":""},{"path":[]},{"path":"https://docs.ropensci.org/webmockr/reference/BodyPattern.html","id":"public-methods","dir":"Reference","previous_headings":"","what":"Public methods","title":"BodyPattern — BodyPattern","text":"BodyPattern$new() BodyPattern$matches() BodyPattern$to_s() BodyPattern$clone()","code":""},{"path":"https://docs.ropensci.org/webmockr/reference/BodyPattern.html","id":"method-new-","dir":"Reference","previous_headings":"","what":"Method new()","title":"BodyPattern — BodyPattern","text":"Create new BodyPattern object","code":""},{"path":"https://docs.ropensci.org/webmockr/reference/BodyPattern.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"BodyPattern — BodyPattern","text":"","code":"BodyPattern$new(pattern)"},{"path":"https://docs.ropensci.org/webmockr/reference/BodyPattern.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"BodyPattern — BodyPattern","text":"pattern (list) body object","code":""},{"path":"https://docs.ropensci.org/webmockr/reference/BodyPattern.html","id":"returns","dir":"Reference","previous_headings":"","what":"Returns","title":"BodyPattern — BodyPattern","text":"new BodyPattern object","code":""},{"path":"https://docs.ropensci.org/webmockr/reference/BodyPattern.html","id":"method-matches-","dir":"Reference","previous_headings":"","what":"Method matches()","title":"BodyPattern — BodyPattern","text":"Match request body pattern pattern","code":""},{"path":"https://docs.ropensci.org/webmockr/reference/BodyPattern.html","id":"usage-1","dir":"Reference","previous_headings":"","what":"Usage","title":"BodyPattern — BodyPattern","text":"","code":"BodyPattern$matches(body, content_type = \"\")"},{"path":"https://docs.ropensci.org/webmockr/reference/BodyPattern.html","id":"arguments-1","dir":"Reference","previous_headings":"","what":"Arguments","title":"BodyPattern — BodyPattern","text":"body (list) body content_type (character) content type","code":""},{"path":"https://docs.ropensci.org/webmockr/reference/BodyPattern.html","id":"returns-1","dir":"Reference","previous_headings":"","what":"Returns","title":"BodyPattern — BodyPattern","text":"boolean","code":""},{"path":"https://docs.ropensci.org/webmockr/reference/BodyPattern.html","id":"method-to-s-","dir":"Reference","previous_headings":"","what":"Method to_s()","title":"BodyPattern — BodyPattern","text":"Print pattern easy human consumption","code":""},{"path":"https://docs.ropensci.org/webmockr/reference/BodyPattern.html","id":"usage-2","dir":"Reference","previous_headings":"","what":"Usage","title":"BodyPattern — BodyPattern","text":"","code":"BodyPattern$to_s()"},{"path":"https://docs.ropensci.org/webmockr/reference/BodyPattern.html","id":"returns-2","dir":"Reference","previous_headings":"","what":"Returns","title":"BodyPattern — BodyPattern","text":"string","code":""},{"path":"https://docs.ropensci.org/webmockr/reference/BodyPattern.html","id":"method-clone-","dir":"Reference","previous_headings":"","what":"Method clone()","title":"BodyPattern — BodyPattern","text":"objects class cloneable method.","code":""},{"path":"https://docs.ropensci.org/webmockr/reference/BodyPattern.html","id":"usage-3","dir":"Reference","previous_headings":"","what":"Usage","title":"BodyPattern — BodyPattern","text":"","code":"BodyPattern$clone(deep = FALSE)"},{"path":"https://docs.ropensci.org/webmockr/reference/BodyPattern.html","id":"arguments-2","dir":"Reference","previous_headings":"","what":"Arguments","title":"BodyPattern — BodyPattern","text":"deep Whether make deep clone.","code":""},{"path":"https://docs.ropensci.org/webmockr/reference/BodyPattern.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"BodyPattern — BodyPattern","text":"","code":"# make a request signature bb <- RequestSignature$new(   method = \"get\",   uri = \"https:/httpbin.org/get\",   options = list(     body = list(foo = \"bar\", a = 5)   ) )  # make body pattern object ## FALSE z <- BodyPattern$new(pattern = list(foo = \"bar\")) z$pattern #> $foo #> [1] \"bar\" #>  z$matches(bb$body) #> [1] FALSE ## TRUE z <- BodyPattern$new(pattern = list(foo = \"bar\", a = 5)) z$pattern #> $foo #> [1] \"bar\" #>  #> $a #> [1] 5 #>  z$matches(bb$body) #> [1] TRUE  # uploads in bodies ## upload NOT in a list bb <- RequestSignature$new(   method = \"post\", uri = \"https:/httpbin.org/post\",   options = list(body = crul::upload(system.file(\"CITATION\"))) ) bb$body #> Form file: CITATION (type: text/plain)  z <- BodyPattern$new(   pattern =     crul::upload(system.file(\"CITATION\")) ) z$pattern #> $path #> [1] \"/usr/lib/R/library/base/CITATION\" #>  #> $type #> [1] \"text/plain\" #>  #> $name #> NULL #>  z$matches(bb$body) #> [1] TRUE  ## upload in a list bb <- RequestSignature$new(   method = \"post\", uri = \"https:/httpbin.org/post\",   options = list(body = list(y = crul::upload(system.file(\"CITATION\")))) ) bb$body #> $y #> Form file: CITATION (type: text/plain)  #>  z <- BodyPattern$new(   pattern =     list(y = crul::upload(system.file(\"CITATION\"))) ) z$pattern #> $y #> Form file: CITATION (type: text/plain)  #>  z$matches(bb$body) #> [1] TRUE  # partial matching ## including partial_incl <- including(list(foo = \"bar\")) z <- BodyPattern$new(pattern = partial_incl) z$pattern #> $foo #> [1] \"bar\" #>  z$matches(list(foo = \"bar\", a = 5)) # TRUE #> [1] TRUE  ## excluding partial_excl <- excluding(list(hello = \"world\")) z <- BodyPattern$new(pattern = partial_excl) z$pattern #> $hello #> [1] \"world\" #>  z$matches(list(a = 5)) # TRUE #> [1] TRUE z$matches(list(hello = \"mars\", a = 5)) # TRUE #> [1] TRUE z$matches(list(hello = \"world\")) # FALSE #> [1] FALSE"},{"path":"https://docs.ropensci.org/webmockr/reference/HashCounter.html","id":null,"dir":"Reference","previous_headings":"","what":"HashCounter — HashCounter","title":"HashCounter — HashCounter","text":"hash counter, store requests, count time used","code":""},{"path":[]},{"path":"https://docs.ropensci.org/webmockr/reference/HashCounter.html","id":"public-fields","dir":"Reference","previous_headings":"","what":"Public fields","title":"HashCounter — HashCounter","text":"hash (list) list internal use , elements key, sig, count","code":""},{"path":[]},{"path":"https://docs.ropensci.org/webmockr/reference/HashCounter.html","id":"public-methods","dir":"Reference","previous_headings":"","what":"Public methods","title":"HashCounter — HashCounter","text":"HashCounter$put() HashCounter$get() HashCounter$clone()","code":""},{"path":"https://docs.ropensci.org/webmockr/reference/HashCounter.html","id":"method-put-","dir":"Reference","previous_headings":"","what":"Method put()","title":"HashCounter — HashCounter","text":"Register request key","code":""},{"path":"https://docs.ropensci.org/webmockr/reference/HashCounter.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"HashCounter — HashCounter","text":"","code":"HashCounter$put(req_sig)"},{"path":"https://docs.ropensci.org/webmockr/reference/HashCounter.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"HashCounter — HashCounter","text":"req_sig object class RequestSignature","code":""},{"path":"https://docs.ropensci.org/webmockr/reference/HashCounter.html","id":"returns","dir":"Reference","previous_headings":"","what":"Returns","title":"HashCounter — HashCounter","text":"nothing returned; registers request iterates internal counter","code":""},{"path":"https://docs.ropensci.org/webmockr/reference/HashCounter.html","id":"method-get-","dir":"Reference","previous_headings":"","what":"Method get()","title":"HashCounter — HashCounter","text":"Get request key","code":""},{"path":"https://docs.ropensci.org/webmockr/reference/HashCounter.html","id":"usage-1","dir":"Reference","previous_headings":"","what":"Usage","title":"HashCounter — HashCounter","text":"","code":"HashCounter$get(req_sig)"},{"path":"https://docs.ropensci.org/webmockr/reference/HashCounter.html","id":"arguments-1","dir":"Reference","previous_headings":"","what":"Arguments","title":"HashCounter — HashCounter","text":"req_sig object class RequestSignature","code":""},{"path":"https://docs.ropensci.org/webmockr/reference/HashCounter.html","id":"returns-1","dir":"Reference","previous_headings":"","what":"Returns","title":"HashCounter — HashCounter","text":"(integer) count many times request made","code":""},{"path":"https://docs.ropensci.org/webmockr/reference/HashCounter.html","id":"method-clone-","dir":"Reference","previous_headings":"","what":"Method clone()","title":"HashCounter — HashCounter","text":"objects class cloneable method.","code":""},{"path":"https://docs.ropensci.org/webmockr/reference/HashCounter.html","id":"usage-2","dir":"Reference","previous_headings":"","what":"Usage","title":"HashCounter — HashCounter","text":"","code":"HashCounter$clone(deep = FALSE)"},{"path":"https://docs.ropensci.org/webmockr/reference/HashCounter.html","id":"arguments-2","dir":"Reference","previous_headings":"","what":"Arguments","title":"HashCounter — HashCounter","text":"deep Whether make deep clone.","code":""},{"path":"https://docs.ropensci.org/webmockr/reference/HashCounter.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"HashCounter — HashCounter","text":"","code":"x <- HashCounter$new() x$hash #> list() z <- RequestSignature$new(method = \"get\", uri = \"https:/httpbin.org/get\") x$put(z) x$hash #> $`GET:  https:/httpbin.org/get` #> $`GET:  https:/httpbin.org/get`$key #> [1] \"GET:  https:/httpbin.org/get\" #>  #> $`GET:  https:/httpbin.org/get`$sig #> <RequestSignature>  #>   method: GET #>   uri: https:/httpbin.org/get #>  #> $`GET:  https:/httpbin.org/get`$count #> [1] 1 #>  #>  x$get(z) #> [1] 1 x$put(z) x$get(z) #> [1] 2"},{"path":"https://docs.ropensci.org/webmockr/reference/HeadersPattern.html","id":null,"dir":"Reference","previous_headings":"","what":"HeadersPattern — HeadersPattern","title":"HeadersPattern — HeadersPattern","text":"headers matcher","code":""},{"path":"https://docs.ropensci.org/webmockr/reference/HeadersPattern.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"HeadersPattern — HeadersPattern","text":"webmockr normalises headers treats forms headers equal: .e following two sets headers equal: list(Header1 = \"value1\", content_length = 123, X_CuStOm_hEAder = \"foo\") list(header1 = \"value1\", \"Content-Length\" = 123, \"x-cuSTOM-HeAder\" = \"foo\")","code":""},{"path":"https://docs.ropensci.org/webmockr/reference/HeadersPattern.html","id":"public-fields","dir":"Reference","previous_headings":"","what":"Public fields","title":"HeadersPattern — HeadersPattern","text":"pattern list","code":""},{"path":[]},{"path":"https://docs.ropensci.org/webmockr/reference/HeadersPattern.html","id":"public-methods","dir":"Reference","previous_headings":"","what":"Public methods","title":"HeadersPattern — HeadersPattern","text":"HeadersPattern$new() HeadersPattern$matches() HeadersPattern$empty_headers() HeadersPattern$to_s() HeadersPattern$clone()","code":""},{"path":"https://docs.ropensci.org/webmockr/reference/HeadersPattern.html","id":"method-new-","dir":"Reference","previous_headings":"","what":"Method new()","title":"HeadersPattern — HeadersPattern","text":"Create new HeadersPattern object","code":""},{"path":"https://docs.ropensci.org/webmockr/reference/HeadersPattern.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"HeadersPattern — HeadersPattern","text":"","code":"HeadersPattern$new(pattern)"},{"path":"https://docs.ropensci.org/webmockr/reference/HeadersPattern.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"HeadersPattern — HeadersPattern","text":"pattern (list) pattern, named list, must named, e.g,. list(= 5, b = 6)","code":""},{"path":"https://docs.ropensci.org/webmockr/reference/HeadersPattern.html","id":"returns","dir":"Reference","previous_headings":"","what":"Returns","title":"HeadersPattern — HeadersPattern","text":"new HeadersPattern object","code":""},{"path":"https://docs.ropensci.org/webmockr/reference/HeadersPattern.html","id":"method-matches-","dir":"Reference","previous_headings":"","what":"Method matches()","title":"HeadersPattern — HeadersPattern","text":"Match list headers stored","code":""},{"path":"https://docs.ropensci.org/webmockr/reference/HeadersPattern.html","id":"usage-1","dir":"Reference","previous_headings":"","what":"Usage","title":"HeadersPattern — HeadersPattern","text":"","code":"HeadersPattern$matches(headers)"},{"path":"https://docs.ropensci.org/webmockr/reference/HeadersPattern.html","id":"arguments-1","dir":"Reference","previous_headings":"","what":"Arguments","title":"HeadersPattern — HeadersPattern","text":"headers (list) named list headers, e.g,. list(= 5, b = 6)","code":""},{"path":"https://docs.ropensci.org/webmockr/reference/HeadersPattern.html","id":"returns-1","dir":"Reference","previous_headings":"","what":"Returns","title":"HeadersPattern — HeadersPattern","text":"boolean","code":""},{"path":"https://docs.ropensci.org/webmockr/reference/HeadersPattern.html","id":"method-empty-headers-","dir":"Reference","previous_headings":"","what":"Method empty_headers()","title":"HeadersPattern — HeadersPattern","text":"headers empty? tests null length==0","code":""},{"path":"https://docs.ropensci.org/webmockr/reference/HeadersPattern.html","id":"usage-2","dir":"Reference","previous_headings":"","what":"Usage","title":"HeadersPattern — HeadersPattern","text":"","code":"HeadersPattern$empty_headers(headers)"},{"path":"https://docs.ropensci.org/webmockr/reference/HeadersPattern.html","id":"arguments-2","dir":"Reference","previous_headings":"","what":"Arguments","title":"HeadersPattern — HeadersPattern","text":"headers named list headers","code":""},{"path":"https://docs.ropensci.org/webmockr/reference/HeadersPattern.html","id":"returns-2","dir":"Reference","previous_headings":"","what":"Returns","title":"HeadersPattern — HeadersPattern","text":"boolean","code":""},{"path":"https://docs.ropensci.org/webmockr/reference/HeadersPattern.html","id":"method-to-s-","dir":"Reference","previous_headings":"","what":"Method to_s()","title":"HeadersPattern — HeadersPattern","text":"Print pattern easy human consumption","code":""},{"path":"https://docs.ropensci.org/webmockr/reference/HeadersPattern.html","id":"usage-3","dir":"Reference","previous_headings":"","what":"Usage","title":"HeadersPattern — HeadersPattern","text":"","code":"HeadersPattern$to_s()"},{"path":"https://docs.ropensci.org/webmockr/reference/HeadersPattern.html","id":"returns-3","dir":"Reference","previous_headings":"","what":"Returns","title":"HeadersPattern — HeadersPattern","text":"string","code":""},{"path":"https://docs.ropensci.org/webmockr/reference/HeadersPattern.html","id":"method-clone-","dir":"Reference","previous_headings":"","what":"Method clone()","title":"HeadersPattern — HeadersPattern","text":"objects class cloneable method.","code":""},{"path":"https://docs.ropensci.org/webmockr/reference/HeadersPattern.html","id":"usage-4","dir":"Reference","previous_headings":"","what":"Usage","title":"HeadersPattern — HeadersPattern","text":"","code":"HeadersPattern$clone(deep = FALSE)"},{"path":"https://docs.ropensci.org/webmockr/reference/HeadersPattern.html","id":"arguments-3","dir":"Reference","previous_headings":"","what":"Arguments","title":"HeadersPattern — HeadersPattern","text":"deep Whether make deep clone.","code":""},{"path":"https://docs.ropensci.org/webmockr/reference/HeadersPattern.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"HeadersPattern — HeadersPattern","text":"","code":"(x <- HeadersPattern$new(pattern = list(a = 5))) #> <HeadersPattern> #>   Public: #>     clone: function (deep = FALSE)  #>     empty_headers: function (headers)  #>     initialize: function (pattern)  #>     matches: function (headers)  #>     pattern: list #>     to_s: function ()  #>   Private: #>     normalize_headers: function (x)  x$pattern #> $a #> [1] 5 #>  x$matches(list(a = 5)) #> [1] TRUE  # different cases (x <- HeadersPattern$new(pattern = list(Header1 = \"value1\"))) #> <HeadersPattern> #>   Public: #>     clone: function (deep = FALSE)  #>     empty_headers: function (headers)  #>     initialize: function (pattern)  #>     matches: function (headers)  #>     pattern: list #>     to_s: function ()  #>   Private: #>     normalize_headers: function (x)  x$pattern #> $header1 #> [1] \"value1\" #>  x$matches(list(header1 = \"value1\")) #> [1] TRUE x$matches(list(header1 = \"value2\")) #> [1] FALSE  # different symbols (x <- HeadersPattern$new(pattern = list(`Hello_World` = \"yep\"))) #> <HeadersPattern> #>   Public: #>     clone: function (deep = FALSE)  #>     empty_headers: function (headers)  #>     initialize: function (pattern)  #>     matches: function (headers)  #>     pattern: list #>     to_s: function ()  #>   Private: #>     normalize_headers: function (x)  x$pattern #> $`hello-world` #> [1] \"yep\" #>  x$matches(list(`hello-world` = \"yep\")) #> [1] TRUE x$matches(list(`hello-worlds` = \"yep\")) #> [1] FALSE  headers <- list(   \"User-Agent\" = \"Apple\",   \"Accept-Encoding\" = \"gzip, deflate\",   \"Accept\" = \"application/json, text/xml, application/xml, */*\" ) (x <- HeadersPattern$new(pattern = headers)) #> <HeadersPattern> #>   Public: #>     clone: function (deep = FALSE)  #>     empty_headers: function (headers)  #>     initialize: function (pattern)  #>     matches: function (headers)  #>     pattern: list #>     to_s: function ()  #>   Private: #>     normalize_headers: function (x)  x$to_s() #> [1] \"user-agent=\\\"Apple\\\", accept-encoding=\\\"gzip, deflate\\\", accept=\\\"application/json, text/xml, application/xml, */*\\\"\" x$pattern #> $`user-agent` #> [1] \"Apple\" #>  #> $`accept-encoding` #> [1] \"gzip, deflate\" #>  #> $accept #> [1] \"application/json, text/xml, application/xml, */*\" #>  x$matches(headers) #> [1] TRUE"},{"path":"https://docs.ropensci.org/webmockr/reference/HttpLibAdapaterRegistry.html","id":null,"dir":"Reference","previous_headings":"","what":"HttpLibAdapaterRegistry — HttpLibAdapaterRegistry","title":"HttpLibAdapaterRegistry — HttpLibAdapaterRegistry","text":"http lib adapter registry","code":""},{"path":"https://docs.ropensci.org/webmockr/reference/HttpLibAdapaterRegistry.html","id":"public-fields","dir":"Reference","previous_headings":"","what":"Public fields","title":"HttpLibAdapaterRegistry — HttpLibAdapaterRegistry","text":"adapters list","code":""},{"path":[]},{"path":"https://docs.ropensci.org/webmockr/reference/HttpLibAdapaterRegistry.html","id":"public-methods","dir":"Reference","previous_headings":"","what":"Public methods","title":"HttpLibAdapaterRegistry — HttpLibAdapaterRegistry","text":"HttpLibAdapaterRegistry$print() HttpLibAdapaterRegistry$register() HttpLibAdapaterRegistry$clone()","code":""},{"path":"https://docs.ropensci.org/webmockr/reference/HttpLibAdapaterRegistry.html","id":"method-print-","dir":"Reference","previous_headings":"","what":"Method print()","title":"HttpLibAdapaterRegistry — HttpLibAdapaterRegistry","text":"print method HttpLibAdapaterRegistry class","code":""},{"path":"https://docs.ropensci.org/webmockr/reference/HttpLibAdapaterRegistry.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"HttpLibAdapaterRegistry — HttpLibAdapaterRegistry","text":"","code":"HttpLibAdapaterRegistry$print(x, ...)"},{"path":"https://docs.ropensci.org/webmockr/reference/HttpLibAdapaterRegistry.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"HttpLibAdapaterRegistry — HttpLibAdapaterRegistry","text":"x self ... ignored","code":""},{"path":"https://docs.ropensci.org/webmockr/reference/HttpLibAdapaterRegistry.html","id":"method-register-","dir":"Reference","previous_headings":"","what":"Method register()","title":"HttpLibAdapaterRegistry — HttpLibAdapaterRegistry","text":"Register http library adapter","code":""},{"path":"https://docs.ropensci.org/webmockr/reference/HttpLibAdapaterRegistry.html","id":"usage-1","dir":"Reference","previous_headings":"","what":"Usage","title":"HttpLibAdapaterRegistry — HttpLibAdapaterRegistry","text":"","code":"HttpLibAdapaterRegistry$register(x)"},{"path":"https://docs.ropensci.org/webmockr/reference/HttpLibAdapaterRegistry.html","id":"arguments-1","dir":"Reference","previous_headings":"","what":"Arguments","title":"HttpLibAdapaterRegistry — HttpLibAdapaterRegistry","text":"x http lib adapter, e.g., CrulAdapter","code":""},{"path":"https://docs.ropensci.org/webmockr/reference/HttpLibAdapaterRegistry.html","id":"returns","dir":"Reference","previous_headings":"","what":"Returns","title":"HttpLibAdapaterRegistry — HttpLibAdapaterRegistry","text":"nothing, registers library adapter","code":""},{"path":"https://docs.ropensci.org/webmockr/reference/HttpLibAdapaterRegistry.html","id":"method-clone-","dir":"Reference","previous_headings":"","what":"Method clone()","title":"HttpLibAdapaterRegistry — HttpLibAdapaterRegistry","text":"objects class cloneable method.","code":""},{"path":"https://docs.ropensci.org/webmockr/reference/HttpLibAdapaterRegistry.html","id":"usage-2","dir":"Reference","previous_headings":"","what":"Usage","title":"HttpLibAdapaterRegistry — HttpLibAdapaterRegistry","text":"","code":"HttpLibAdapaterRegistry$clone(deep = FALSE)"},{"path":"https://docs.ropensci.org/webmockr/reference/HttpLibAdapaterRegistry.html","id":"arguments-2","dir":"Reference","previous_headings":"","what":"Arguments","title":"HttpLibAdapaterRegistry — HttpLibAdapaterRegistry","text":"deep Whether make deep clone.","code":""},{"path":"https://docs.ropensci.org/webmockr/reference/HttpLibAdapaterRegistry.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"HttpLibAdapaterRegistry — HttpLibAdapaterRegistry","text":"","code":"x <- HttpLibAdapaterRegistry$new() x$register(CrulAdapter$new()) x #> <HttpLibAdapaterRegistry>  #>   CrulAdapter: webmockr:::CrulAdapter x$adapters #> [[1]] #> <CrulAdapter> #>   Inherits from: <Adapter> #>   Public: #>     client: crul #>     clone: function (deep = FALSE)  #>     disable: function (quiet = FALSE)  #>     enable: function (quiet = FALSE)  #>     handle_request: function (req)  #>     initialize: function ()  #>     name: CrulAdapter #>     remove_stubs: function ()  #>   Private: #>     add_response_sequences: function (stub, response)  #>     build_request: function (x)  #>     build_response: function (req, resp)  #>     build_stub_response: function (stub)  #>     fetch_request: function (request)  #>     make_stub_request_code: function (x)  #>     mock: function (on)  #>     pluck_url: function (request)  #>     request_handler: function (request)  #>     update_vcr_disk_path: function (response)  #>  x$adapters[[1]]$name #> [1] \"CrulAdapter\""},{"path":"https://docs.ropensci.org/webmockr/reference/MethodPattern.html","id":null,"dir":"Reference","previous_headings":"","what":"MethodPattern — MethodPattern","title":"MethodPattern — MethodPattern","text":"method matcher","code":""},{"path":"https://docs.ropensci.org/webmockr/reference/MethodPattern.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"MethodPattern — MethodPattern","text":"Matches regardless case. e.g., POST match post","code":""},{"path":"https://docs.ropensci.org/webmockr/reference/MethodPattern.html","id":"public-fields","dir":"Reference","previous_headings":"","what":"Public fields","title":"MethodPattern — MethodPattern","text":"pattern (character) http method","code":""},{"path":[]},{"path":"https://docs.ropensci.org/webmockr/reference/MethodPattern.html","id":"public-methods","dir":"Reference","previous_headings":"","what":"Public methods","title":"MethodPattern — MethodPattern","text":"MethodPattern$new() MethodPattern$matches() MethodPattern$to_s() MethodPattern$clone()","code":""},{"path":"https://docs.ropensci.org/webmockr/reference/MethodPattern.html","id":"method-new-","dir":"Reference","previous_headings":"","what":"Method new()","title":"MethodPattern — MethodPattern","text":"Create new MethodPattern object","code":""},{"path":"https://docs.ropensci.org/webmockr/reference/MethodPattern.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"MethodPattern — MethodPattern","text":"","code":"MethodPattern$new(pattern)"},{"path":"https://docs.ropensci.org/webmockr/reference/MethodPattern.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"MethodPattern — MethodPattern","text":"pattern (character) HTTP method, lowercase","code":""},{"path":"https://docs.ropensci.org/webmockr/reference/MethodPattern.html","id":"returns","dir":"Reference","previous_headings":"","what":"Returns","title":"MethodPattern — MethodPattern","text":"new MethodPattern object","code":""},{"path":"https://docs.ropensci.org/webmockr/reference/MethodPattern.html","id":"method-matches-","dir":"Reference","previous_headings":"","what":"Method matches()","title":"MethodPattern — MethodPattern","text":"test pattern matches given http method","code":""},{"path":"https://docs.ropensci.org/webmockr/reference/MethodPattern.html","id":"usage-1","dir":"Reference","previous_headings":"","what":"Usage","title":"MethodPattern — MethodPattern","text":"","code":"MethodPattern$matches(method)"},{"path":"https://docs.ropensci.org/webmockr/reference/MethodPattern.html","id":"arguments-1","dir":"Reference","previous_headings":"","what":"Arguments","title":"MethodPattern — MethodPattern","text":"method (character) HTTP method, lowercase","code":""},{"path":"https://docs.ropensci.org/webmockr/reference/MethodPattern.html","id":"returns-1","dir":"Reference","previous_headings":"","what":"Returns","title":"MethodPattern — MethodPattern","text":"boolean","code":""},{"path":"https://docs.ropensci.org/webmockr/reference/MethodPattern.html","id":"method-to-s-","dir":"Reference","previous_headings":"","what":"Method to_s()","title":"MethodPattern — MethodPattern","text":"Print pattern easy human consumption","code":""},{"path":"https://docs.ropensci.org/webmockr/reference/MethodPattern.html","id":"usage-2","dir":"Reference","previous_headings":"","what":"Usage","title":"MethodPattern — MethodPattern","text":"","code":"MethodPattern$to_s()"},{"path":"https://docs.ropensci.org/webmockr/reference/MethodPattern.html","id":"returns-2","dir":"Reference","previous_headings":"","what":"Returns","title":"MethodPattern — MethodPattern","text":"string","code":""},{"path":"https://docs.ropensci.org/webmockr/reference/MethodPattern.html","id":"method-clone-","dir":"Reference","previous_headings":"","what":"Method clone()","title":"MethodPattern — MethodPattern","text":"objects class cloneable method.","code":""},{"path":"https://docs.ropensci.org/webmockr/reference/MethodPattern.html","id":"usage-3","dir":"Reference","previous_headings":"","what":"Usage","title":"MethodPattern — MethodPattern","text":"","code":"MethodPattern$clone(deep = FALSE)"},{"path":"https://docs.ropensci.org/webmockr/reference/MethodPattern.html","id":"arguments-2","dir":"Reference","previous_headings":"","what":"Arguments","title":"MethodPattern — MethodPattern","text":"deep Whether make deep clone.","code":""},{"path":"https://docs.ropensci.org/webmockr/reference/MethodPattern.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"MethodPattern — MethodPattern","text":"","code":"(x <- MethodPattern$new(pattern = \"post\")) #> <MethodPattern> #>   Public: #>     clone: function (deep = FALSE)  #>     initialize: function (pattern)  #>     matches: function (method)  #>     pattern: post #>     to_s: function ()  x$pattern #> [1] \"post\" x$matches(method = \"post\") #> [1] TRUE x$matches(method = \"POST\") #> [1] TRUE  # all matches() calls should be TRUE (x <- MethodPattern$new(pattern = \"any\")) #> <MethodPattern> #>   Public: #>     clone: function (deep = FALSE)  #>     initialize: function (pattern)  #>     matches: function (method)  #>     pattern: any #>     to_s: function ()  x$pattern #> [1] \"any\" x$matches(method = \"post\") #> [1] TRUE x$matches(method = \"GET\") #> [1] TRUE x$matches(method = \"HEAD\") #> [1] TRUE"},{"path":"https://docs.ropensci.org/webmockr/reference/RequestPattern.html","id":null,"dir":"Reference","previous_headings":"","what":"RequestPattern class — RequestPattern","title":"RequestPattern class — RequestPattern","text":"class handling request matchers","code":""},{"path":[]},{"path":"https://docs.ropensci.org/webmockr/reference/RequestPattern.html","id":"public-fields","dir":"Reference","previous_headings":"","what":"Public fields","title":"RequestPattern class — RequestPattern","text":"method_pattern xxx uri_pattern xxx body_pattern xxx headers_pattern xxx","code":""},{"path":[]},{"path":"https://docs.ropensci.org/webmockr/reference/RequestPattern.html","id":"public-methods","dir":"Reference","previous_headings":"","what":"Public methods","title":"RequestPattern class — RequestPattern","text":"RequestPattern$new() RequestPattern$matches() RequestPattern$to_s() RequestPattern$clone()","code":""},{"path":"https://docs.ropensci.org/webmockr/reference/RequestPattern.html","id":"method-new-","dir":"Reference","previous_headings":"","what":"Method new()","title":"RequestPattern class — RequestPattern","text":"Create new RequestPattern object","code":""},{"path":"https://docs.ropensci.org/webmockr/reference/RequestPattern.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"RequestPattern class — RequestPattern","text":"","code":"RequestPattern$new(   method,   uri = NULL,   uri_regex = NULL,   query = NULL,   body = NULL,   headers = NULL )"},{"path":"https://docs.ropensci.org/webmockr/reference/RequestPattern.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"RequestPattern class — RequestPattern","text":"method HTTP method (, head, options, get, post, put, patch, trace, delete). \"\" matches HTTP method. required. uri (character) request URI. required uri_regex uri_regex (character) request URI regex. required uri query (list) query parameters, optional body (list) body request, optional headers (list) headers, optional","code":""},{"path":"https://docs.ropensci.org/webmockr/reference/RequestPattern.html","id":"returns","dir":"Reference","previous_headings":"","what":"Returns","title":"RequestPattern class — RequestPattern","text":"new RequestPattern object","code":""},{"path":"https://docs.ropensci.org/webmockr/reference/RequestPattern.html","id":"method-matches-","dir":"Reference","previous_headings":"","what":"Method matches()","title":"RequestPattern class — RequestPattern","text":"request signature match selected matchers?","code":""},{"path":"https://docs.ropensci.org/webmockr/reference/RequestPattern.html","id":"usage-1","dir":"Reference","previous_headings":"","what":"Usage","title":"RequestPattern class — RequestPattern","text":"","code":"RequestPattern$matches(request_signature)"},{"path":"https://docs.ropensci.org/webmockr/reference/RequestPattern.html","id":"arguments-1","dir":"Reference","previous_headings":"","what":"Arguments","title":"RequestPattern class — RequestPattern","text":"request_signature RequestSignature object","code":""},{"path":"https://docs.ropensci.org/webmockr/reference/RequestPattern.html","id":"returns-1","dir":"Reference","previous_headings":"","what":"Returns","title":"RequestPattern class — RequestPattern","text":"boolean","code":""},{"path":"https://docs.ropensci.org/webmockr/reference/RequestPattern.html","id":"method-to-s-","dir":"Reference","previous_headings":"","what":"Method to_s()","title":"RequestPattern class — RequestPattern","text":"Print pattern easy human consumption","code":""},{"path":"https://docs.ropensci.org/webmockr/reference/RequestPattern.html","id":"usage-2","dir":"Reference","previous_headings":"","what":"Usage","title":"RequestPattern class — RequestPattern","text":"","code":"RequestPattern$to_s()"},{"path":"https://docs.ropensci.org/webmockr/reference/RequestPattern.html","id":"returns-2","dir":"Reference","previous_headings":"","what":"Returns","title":"RequestPattern class — RequestPattern","text":"string","code":""},{"path":"https://docs.ropensci.org/webmockr/reference/RequestPattern.html","id":"method-clone-","dir":"Reference","previous_headings":"","what":"Method clone()","title":"RequestPattern class — RequestPattern","text":"objects class cloneable method.","code":""},{"path":"https://docs.ropensci.org/webmockr/reference/RequestPattern.html","id":"usage-3","dir":"Reference","previous_headings":"","what":"Usage","title":"RequestPattern class — RequestPattern","text":"","code":"RequestPattern$clone(deep = FALSE)"},{"path":"https://docs.ropensci.org/webmockr/reference/RequestPattern.html","id":"arguments-2","dir":"Reference","previous_headings":"","what":"Arguments","title":"RequestPattern class — RequestPattern","text":"deep Whether make deep clone.","code":""},{"path":"https://docs.ropensci.org/webmockr/reference/RequestPattern.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"RequestPattern class — RequestPattern","text":"","code":"if (FALSE) { # \\dontrun{ (x <- RequestPattern$new(method = \"get\", uri = \"httpbin.org/get\")) x$body_pattern x$headers_pattern x$method_pattern x$uri_pattern x$to_s()  # make a request signature rs <- RequestSignature$new(method = \"get\", uri = \"http://httpbin.org/get\")  # check if it matches x$matches(rs)  # regex uri (x <- RequestPattern$new(method = \"get\", uri_regex = \".+ossref.org\")) x$uri_pattern x$uri_pattern$to_s() x$to_s()  # uri with query parameters (x <- RequestPattern$new(   method = \"get\", uri = \"https://httpbin.org/get\",   query = list(foo = \"bar\") )) x$to_s() ## query params included in url, not separately (x <- RequestPattern$new(   method = \"get\", uri = \"https://httpbin.org/get?stuff=things\" )) x$to_s() x$query_params  # just headers (via setting method=any & uri_regex=.+) headers <- list(   \"User-Agent\" = \"Apple\",   \"Accept-Encoding\" = \"gzip, deflate\",   \"Accept\" = \"application/json, text/xml, application/xml, */*\" ) x <- RequestPattern$new(   method = \"any\",   uri_regex = \".+\",   headers = headers ) x$to_s() rs <- RequestSignature$new(   method = \"any\", uri = \"http://foo.bar\",   options = list(headers = headers) ) rs x$matches(rs)  # body x <- RequestPattern$new(   method = \"post\", uri = \"httpbin.org/post\",   body = list(y = crul::upload(system.file(\"CITATION\"))) ) x$to_s() rs <- RequestSignature$new(   method = \"post\", uri = \"http://httpbin.org/post\",   options = list(     body = list(y = crul::upload(system.file(\"CITATION\")))   ) ) rs x$matches(rs) } # }"},{"path":"https://docs.ropensci.org/webmockr/reference/RequestRegistry.html","id":null,"dir":"Reference","previous_headings":"","what":"RequestRegistry — RequestRegistry","title":"RequestRegistry — RequestRegistry","text":"keeps track HTTP requests","code":""},{"path":[]},{"path":"https://docs.ropensci.org/webmockr/reference/RequestRegistry.html","id":"public-fields","dir":"Reference","previous_headings":"","what":"Public fields","title":"RequestRegistry — RequestRegistry","text":"request_signatures HashCounter object","code":""},{"path":[]},{"path":"https://docs.ropensci.org/webmockr/reference/RequestRegistry.html","id":"public-methods","dir":"Reference","previous_headings":"","what":"Public methods","title":"RequestRegistry — RequestRegistry","text":"RequestRegistry$print() RequestRegistry$reset() RequestRegistry$register_request() RequestRegistry$times_executed() RequestRegistry$clone()","code":""},{"path":"https://docs.ropensci.org/webmockr/reference/RequestRegistry.html","id":"method-print-","dir":"Reference","previous_headings":"","what":"Method print()","title":"RequestRegistry — RequestRegistry","text":"print method RequestRegistry class","code":""},{"path":"https://docs.ropensci.org/webmockr/reference/RequestRegistry.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"RequestRegistry — RequestRegistry","text":"","code":"RequestRegistry$print(x, ...)"},{"path":"https://docs.ropensci.org/webmockr/reference/RequestRegistry.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"RequestRegistry — RequestRegistry","text":"x self ... ignored","code":""},{"path":"https://docs.ropensci.org/webmockr/reference/RequestRegistry.html","id":"method-reset-","dir":"Reference","previous_headings":"","what":"Method reset()","title":"RequestRegistry — RequestRegistry","text":"Reset registry registered requests","code":""},{"path":"https://docs.ropensci.org/webmockr/reference/RequestRegistry.html","id":"usage-1","dir":"Reference","previous_headings":"","what":"Usage","title":"RequestRegistry — RequestRegistry","text":"","code":"RequestRegistry$reset()"},{"path":"https://docs.ropensci.org/webmockr/reference/RequestRegistry.html","id":"returns","dir":"Reference","previous_headings":"","what":"Returns","title":"RequestRegistry — RequestRegistry","text":"nothing returned; ressets registry requests","code":""},{"path":"https://docs.ropensci.org/webmockr/reference/RequestRegistry.html","id":"method-register-request-","dir":"Reference","previous_headings":"","what":"Method register_request()","title":"RequestRegistry — RequestRegistry","text":"Register request","code":""},{"path":"https://docs.ropensci.org/webmockr/reference/RequestRegistry.html","id":"usage-2","dir":"Reference","previous_headings":"","what":"Usage","title":"RequestRegistry — RequestRegistry","text":"","code":"RequestRegistry$register_request(request)"},{"path":"https://docs.ropensci.org/webmockr/reference/RequestRegistry.html","id":"arguments-1","dir":"Reference","previous_headings":"","what":"Arguments","title":"RequestRegistry — RequestRegistry","text":"request character string request, serialized RequestSignature$new(...)$to_s()","code":""},{"path":"https://docs.ropensci.org/webmockr/reference/RequestRegistry.html","id":"returns-1","dir":"Reference","previous_headings":"","what":"Returns","title":"RequestRegistry — RequestRegistry","text":"nothing returned; registers request","code":""},{"path":"https://docs.ropensci.org/webmockr/reference/RequestRegistry.html","id":"method-times-executed-","dir":"Reference","previous_headings":"","what":"Method times_executed()","title":"RequestRegistry — RequestRegistry","text":"many times request made","code":""},{"path":"https://docs.ropensci.org/webmockr/reference/RequestRegistry.html","id":"usage-3","dir":"Reference","previous_headings":"","what":"Usage","title":"RequestRegistry — RequestRegistry","text":"","code":"RequestRegistry$times_executed(request_pattern)"},{"path":"https://docs.ropensci.org/webmockr/reference/RequestRegistry.html","id":"arguments-2","dir":"Reference","previous_headings":"","what":"Arguments","title":"RequestRegistry — RequestRegistry","text":"request_pattern object class RequestPattern","code":""},{"path":"https://docs.ropensci.org/webmockr/reference/RequestRegistry.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"RequestRegistry — RequestRegistry","text":"match found request pattern, 0 returned","code":""},{"path":"https://docs.ropensci.org/webmockr/reference/RequestRegistry.html","id":"returns-2","dir":"Reference","previous_headings":"","what":"Returns","title":"RequestRegistry — RequestRegistry","text":"integer, number times request made","code":""},{"path":"https://docs.ropensci.org/webmockr/reference/RequestRegistry.html","id":"method-clone-","dir":"Reference","previous_headings":"","what":"Method clone()","title":"RequestRegistry — RequestRegistry","text":"objects class cloneable method.","code":""},{"path":"https://docs.ropensci.org/webmockr/reference/RequestRegistry.html","id":"usage-4","dir":"Reference","previous_headings":"","what":"Usage","title":"RequestRegistry — RequestRegistry","text":"","code":"RequestRegistry$clone(deep = FALSE)"},{"path":"https://docs.ropensci.org/webmockr/reference/RequestRegistry.html","id":"arguments-3","dir":"Reference","previous_headings":"","what":"Arguments","title":"RequestRegistry — RequestRegistry","text":"deep Whether make deep clone.","code":""},{"path":"https://docs.ropensci.org/webmockr/reference/RequestRegistry.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"RequestRegistry — RequestRegistry","text":"","code":"x <- RequestRegistry$new() z1 <- RequestSignature$new(\"get\", \"http://scottchamberlain.info\") z2 <- RequestSignature$new(\"post\", \"https://httpbin.org/post\") x$register_request(request = z1) x$register_request(request = z1) x$register_request(request = z2) # print method to list requests x #> <webmockr request registry>  #>  Registered Requests #>   GET:  http://scottchamberlain.info was made 2 times #>  #>   POST:  https://httpbin.org/post was made 1 times #>   # more complex requests w <- RequestSignature$new(   method = \"get\",   uri = \"https:/httpbin.org/get\",   options = list(headers = list(`User-Agent` = \"foobar\", stuff = \"things\")) ) w$to_s() #> [1] \"GET:  https:/httpbin.org/get   with headers {User-Agent: foobar, stuff: things}\" x$register_request(request = w) x #> <webmockr request registry>  #>  Registered Requests #>   GET:  http://scottchamberlain.info was made 2 times #>  #>   POST:  https://httpbin.org/post was made 1 times #>  #>   GET:  https:/httpbin.org/get   with headers {User-Agent: foobar, stuff: things} was made 1 times #>    # hashes, and number of times each requested x$request_signatures$hash #> $`GET:  http://scottchamberlain.info` #> $`GET:  http://scottchamberlain.info`$key #> [1] \"GET:  http://scottchamberlain.info\" #>  #> $`GET:  http://scottchamberlain.info`$sig #> <RequestSignature>  #>   method: GET #>   uri: http://scottchamberlain.info #>  #> $`GET:  http://scottchamberlain.info`$count #> [1] 2 #>  #>  #> $`POST:  https://httpbin.org/post` #> $`POST:  https://httpbin.org/post`$key #> [1] \"POST:  https://httpbin.org/post\" #>  #> $`POST:  https://httpbin.org/post`$sig #> <RequestSignature>  #>   method: POST #>   uri: https://httpbin.org/post #>  #> $`POST:  https://httpbin.org/post`$count #> [1] 1 #>  #>  #> $`GET:  https:/httpbin.org/get   with headers {User-Agent: foobar, stuff: things}` #> $`GET:  https:/httpbin.org/get   with headers {User-Agent: foobar, stuff: things}`$key #> [1] \"GET:  https:/httpbin.org/get   with headers {User-Agent: foobar, stuff: things}\" #>  #> $`GET:  https:/httpbin.org/get   with headers {User-Agent: foobar, stuff: things}`$sig #> <RequestSignature>  #>   method: GET #>   uri: https:/httpbin.org/get #>   headers:  #>      User-Agent: foobar #>      stuff: things #>  #> $`GET:  https:/httpbin.org/get   with headers {User-Agent: foobar, stuff: things}`$count #> [1] 1 #>  #>   # times_executed method pat <- RequestPattern$new(   method = \"get\",   uri = \"https:/httpbin.org/get\",   headers = list(`User-Agent` = \"foobar\", stuff = \"things\") ) pat$to_s() #> [1] \"GET http://https/httpbin.org%2Fget   with headers user-agent=\\\"foobar\\\", stuff=\\\"things\\\"\" x$times_executed(pat) #> [1] 1 z <- RequestPattern$new(method = \"get\", uri = \"http://scottchamberlain.info\") x$times_executed(z) #> [1] 2 w <- RequestPattern$new(method = \"post\", uri = \"https://httpbin.org/post\") x$times_executed(w) #> [1] 1  ## pattern with no matches - returns 0 (zero) pat <- RequestPattern$new(   method = \"get\",   uri = \"http://recology.info/\" ) pat$to_s() #> [1] \"GET http://recology.info\" x$times_executed(pat) #> [1] 0  # reset the request registry x$reset()"},{"path":"https://docs.ropensci.org/webmockr/reference/RequestSignature.html","id":null,"dir":"Reference","previous_headings":"","what":"RequestSignature — RequestSignature","title":"RequestSignature — RequestSignature","text":"General purpose request signature builder","code":""},{"path":"https://docs.ropensci.org/webmockr/reference/RequestSignature.html","id":"public-fields","dir":"Reference","previous_headings":"","what":"Public fields","title":"RequestSignature — RequestSignature","text":"method (character) http method uri (character) uri body (various) request body headers (list) named list headers proxies (list) proxies named list auth (list) authentication details, named list url internal use disk (character) writing disk, path fields (various) request body details output (various) request output details, disk, memory, etc","code":""},{"path":[]},{"path":"https://docs.ropensci.org/webmockr/reference/RequestSignature.html","id":"public-methods","dir":"Reference","previous_headings":"","what":"Public methods","title":"RequestSignature — RequestSignature","text":"RequestSignature$new() RequestSignature$print() RequestSignature$to_s() RequestSignature$clone()","code":""},{"path":"https://docs.ropensci.org/webmockr/reference/RequestSignature.html","id":"method-new-","dir":"Reference","previous_headings":"","what":"Method new()","title":"RequestSignature — RequestSignature","text":"Create new RequestSignature object","code":""},{"path":"https://docs.ropensci.org/webmockr/reference/RequestSignature.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"RequestSignature — RequestSignature","text":"","code":"RequestSignature$new(method, uri, options = list())"},{"path":"https://docs.ropensci.org/webmockr/reference/RequestSignature.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"RequestSignature — RequestSignature","text":"method HTTP method (, head, options, get, post, put, patch, trace, delete). \"\" matches HTTP method. required. uri (character) request URI. required. options (list) options. optional. See Details.","code":""},{"path":"https://docs.ropensci.org/webmockr/reference/RequestSignature.html","id":"returns","dir":"Reference","previous_headings":"","what":"Returns","title":"RequestSignature — RequestSignature","text":"new RequestSignature object","code":""},{"path":"https://docs.ropensci.org/webmockr/reference/RequestSignature.html","id":"method-print-","dir":"Reference","previous_headings":"","what":"Method print()","title":"RequestSignature — RequestSignature","text":"print method RequestSignature class","code":""},{"path":"https://docs.ropensci.org/webmockr/reference/RequestSignature.html","id":"usage-1","dir":"Reference","previous_headings":"","what":"Usage","title":"RequestSignature — RequestSignature","text":"","code":"RequestSignature$print()"},{"path":"https://docs.ropensci.org/webmockr/reference/RequestSignature.html","id":"arguments-1","dir":"Reference","previous_headings":"","what":"Arguments","title":"RequestSignature — RequestSignature","text":"x self ... ignored","code":""},{"path":"https://docs.ropensci.org/webmockr/reference/RequestSignature.html","id":"method-to-s-","dir":"Reference","previous_headings":"","what":"Method to_s()","title":"RequestSignature — RequestSignature","text":"Request signature string","code":""},{"path":"https://docs.ropensci.org/webmockr/reference/RequestSignature.html","id":"usage-2","dir":"Reference","previous_headings":"","what":"Usage","title":"RequestSignature — RequestSignature","text":"","code":"RequestSignature$to_s()"},{"path":"https://docs.ropensci.org/webmockr/reference/RequestSignature.html","id":"returns-1","dir":"Reference","previous_headings":"","what":"Returns","title":"RequestSignature — RequestSignature","text":"character string representation request signature","code":""},{"path":"https://docs.ropensci.org/webmockr/reference/RequestSignature.html","id":"method-clone-","dir":"Reference","previous_headings":"","what":"Method clone()","title":"RequestSignature — RequestSignature","text":"objects class cloneable method.","code":""},{"path":"https://docs.ropensci.org/webmockr/reference/RequestSignature.html","id":"usage-3","dir":"Reference","previous_headings":"","what":"Usage","title":"RequestSignature — RequestSignature","text":"","code":"RequestSignature$clone(deep = FALSE)"},{"path":"https://docs.ropensci.org/webmockr/reference/RequestSignature.html","id":"arguments-2","dir":"Reference","previous_headings":"","what":"Arguments","title":"RequestSignature — RequestSignature","text":"deep Whether make deep clone.","code":""},{"path":"https://docs.ropensci.org/webmockr/reference/RequestSignature.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"RequestSignature — RequestSignature","text":"","code":"# make request signature x <- RequestSignature$new(method = \"get\", uri = \"https:/httpbin.org/get\") # method x$method #> [1] \"get\" # uri x$uri #> [1] \"https:/httpbin.org/get\" # request signature to string x$to_s() #> [1] \"GET:  https:/httpbin.org/get\"  # headers w <- RequestSignature$new(   method = \"get\",   uri = \"https:/httpbin.org/get\",   options = list(headers = list(`User-Agent` = \"foobar\", stuff = \"things\")) ) w #> <RequestSignature>  #>   method: GET #>   uri: https:/httpbin.org/get #>   headers:  #>      User-Agent: foobar #>      stuff: things w$headers #> $`User-Agent` #> [1] \"foobar\" #>  #> $stuff #> [1] \"things\" #>  w$to_s() #> [1] \"GET:  https:/httpbin.org/get   with headers {User-Agent: foobar, stuff: things}\"  # headers and body bb <- RequestSignature$new(   method = \"get\",   uri = \"https:/httpbin.org/get\",   options = list(     headers = list(`User-Agent` = \"foobar\", stuff = \"things\"),     body = list(a = \"tables\")   ) ) bb #> <RequestSignature>  #>   method: GET #>   uri: https:/httpbin.org/get #>   body:  #>      a: tables #>   headers:  #>      User-Agent: foobar #>      stuff: things bb$headers #> $`User-Agent` #> [1] \"foobar\" #>  #> $stuff #> [1] \"things\" #>  bb$body #> $a #> [1] \"tables\" #>  bb$to_s() #> [1] \"GET:  https:/httpbin.org/get  with body {a: tables}  with headers {User-Agent: foobar, stuff: things}\"  # with disk path f <- tempfile() bb <- RequestSignature$new(   method = \"get\",   uri = \"https:/httpbin.org/get\",   options = list(disk = f) ) bb #> <RequestSignature>  #>   method: GET #>   uri: https:/httpbin.org/get #>   disk: /tmp/RtmpaSVAg0/file4ec74d54361 bb$disk #> [1] \"/tmp/RtmpaSVAg0/file4ec74d54361\" bb$to_s() #> [1] \"GET:  https:/httpbin.org/get\""},{"path":"https://docs.ropensci.org/webmockr/reference/Response.html","id":null,"dir":"Reference","previous_headings":"","what":"Response — Response","title":"Response — Response","text":"custom webmockr http response class","code":""},{"path":"https://docs.ropensci.org/webmockr/reference/Response.html","id":"public-fields","dir":"Reference","previous_headings":"","what":"Public fields","title":"Response — Response","text":"url (character) url body (various) list, character, etc content (various) response content/body request_headers (list) named list response_headers (list) named list options (character) list status_code (integer) http status code exception (character) exception message should_timeout (logical) response timeout?","code":""},{"path":[]},{"path":"https://docs.ropensci.org/webmockr/reference/Response.html","id":"public-methods","dir":"Reference","previous_headings":"","what":"Public methods","title":"Response — Response","text":"Response$new() Response$print() Response$set_url() Response$get_url() Response$set_request_headers() Response$get_request_headers() Response$set_response_headers() Response$get_respone_headers() Response$set_body() Response$get_body() Response$set_status() Response$get_status() Response$set_exception() Response$get_exception() Response$clone()","code":""},{"path":"https://docs.ropensci.org/webmockr/reference/Response.html","id":"method-new-","dir":"Reference","previous_headings":"","what":"Method new()","title":"Response — Response","text":"Create new Response object","code":""},{"path":"https://docs.ropensci.org/webmockr/reference/Response.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Response — Response","text":"","code":"Response$new(options = list())"},{"path":"https://docs.ropensci.org/webmockr/reference/Response.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Response — Response","text":"options (list) list options","code":""},{"path":"https://docs.ropensci.org/webmockr/reference/Response.html","id":"returns","dir":"Reference","previous_headings":"","what":"Returns","title":"Response — Response","text":"new Response object","code":""},{"path":"https://docs.ropensci.org/webmockr/reference/Response.html","id":"method-print-","dir":"Reference","previous_headings":"","what":"Method print()","title":"Response — Response","text":"print method Response class","code":""},{"path":"https://docs.ropensci.org/webmockr/reference/Response.html","id":"usage-1","dir":"Reference","previous_headings":"","what":"Usage","title":"Response — Response","text":"","code":"Response$print(x, ...)"},{"path":"https://docs.ropensci.org/webmockr/reference/Response.html","id":"arguments-1","dir":"Reference","previous_headings":"","what":"Arguments","title":"Response — Response","text":"x self ... ignored","code":""},{"path":"https://docs.ropensci.org/webmockr/reference/Response.html","id":"method-set-url-","dir":"Reference","previous_headings":"","what":"Method set_url()","title":"Response — Response","text":"set url response","code":""},{"path":"https://docs.ropensci.org/webmockr/reference/Response.html","id":"usage-2","dir":"Reference","previous_headings":"","what":"Usage","title":"Response — Response","text":"","code":"Response$set_url(url)"},{"path":"https://docs.ropensci.org/webmockr/reference/Response.html","id":"arguments-2","dir":"Reference","previous_headings":"","what":"Arguments","title":"Response — Response","text":"url (character) url","code":""},{"path":"https://docs.ropensci.org/webmockr/reference/Response.html","id":"returns-1","dir":"Reference","previous_headings":"","what":"Returns","title":"Response — Response","text":"nothing returned; sets url","code":""},{"path":"https://docs.ropensci.org/webmockr/reference/Response.html","id":"method-get-url-","dir":"Reference","previous_headings":"","what":"Method get_url()","title":"Response — Response","text":"get url response","code":""},{"path":"https://docs.ropensci.org/webmockr/reference/Response.html","id":"usage-3","dir":"Reference","previous_headings":"","what":"Usage","title":"Response — Response","text":"","code":"Response$get_url()"},{"path":"https://docs.ropensci.org/webmockr/reference/Response.html","id":"returns-2","dir":"Reference","previous_headings":"","what":"Returns","title":"Response — Response","text":"(character) url","code":""},{"path":"https://docs.ropensci.org/webmockr/reference/Response.html","id":"method-set-request-headers-","dir":"Reference","previous_headings":"","what":"Method set_request_headers()","title":"Response — Response","text":"set request headers response","code":""},{"path":"https://docs.ropensci.org/webmockr/reference/Response.html","id":"usage-4","dir":"Reference","previous_headings":"","what":"Usage","title":"Response — Response","text":"","code":"Response$set_request_headers(headers, capitalize = TRUE)"},{"path":"https://docs.ropensci.org/webmockr/reference/Response.html","id":"arguments-3","dir":"Reference","previous_headings":"","what":"Arguments","title":"Response — Response","text":"headers (list) named list capitalize (logical) whether capitalize first letters header; default: TRUE","code":""},{"path":"https://docs.ropensci.org/webmockr/reference/Response.html","id":"returns-3","dir":"Reference","previous_headings":"","what":"Returns","title":"Response — Response","text":"nothing returned; sets request headers response","code":""},{"path":"https://docs.ropensci.org/webmockr/reference/Response.html","id":"method-get-request-headers-","dir":"Reference","previous_headings":"","what":"Method get_request_headers()","title":"Response — Response","text":"get request headers response","code":""},{"path":"https://docs.ropensci.org/webmockr/reference/Response.html","id":"usage-5","dir":"Reference","previous_headings":"","what":"Usage","title":"Response — Response","text":"","code":"Response$get_request_headers()"},{"path":"https://docs.ropensci.org/webmockr/reference/Response.html","id":"returns-4","dir":"Reference","previous_headings":"","what":"Returns","title":"Response — Response","text":"(list) request headers, named list","code":""},{"path":"https://docs.ropensci.org/webmockr/reference/Response.html","id":"method-set-response-headers-","dir":"Reference","previous_headings":"","what":"Method set_response_headers()","title":"Response — Response","text":"set response headers response","code":""},{"path":"https://docs.ropensci.org/webmockr/reference/Response.html","id":"usage-6","dir":"Reference","previous_headings":"","what":"Usage","title":"Response — Response","text":"","code":"Response$set_response_headers(headers, capitalize = TRUE)"},{"path":"https://docs.ropensci.org/webmockr/reference/Response.html","id":"arguments-4","dir":"Reference","previous_headings":"","what":"Arguments","title":"Response — Response","text":"headers (list) named list capitalize (logical) whether capitalize first letters header; default: TRUE","code":""},{"path":"https://docs.ropensci.org/webmockr/reference/Response.html","id":"returns-5","dir":"Reference","previous_headings":"","what":"Returns","title":"Response — Response","text":"nothing returned; sets response headers response","code":""},{"path":"https://docs.ropensci.org/webmockr/reference/Response.html","id":"method-get-respone-headers-","dir":"Reference","previous_headings":"","what":"Method get_respone_headers()","title":"Response — Response","text":"get response headers response","code":""},{"path":"https://docs.ropensci.org/webmockr/reference/Response.html","id":"usage-7","dir":"Reference","previous_headings":"","what":"Usage","title":"Response — Response","text":"","code":"Response$get_respone_headers()"},{"path":"https://docs.ropensci.org/webmockr/reference/Response.html","id":"returns-6","dir":"Reference","previous_headings":"","what":"Returns","title":"Response — Response","text":"(list) response headers, named list","code":""},{"path":"https://docs.ropensci.org/webmockr/reference/Response.html","id":"method-set-body-","dir":"Reference","previous_headings":"","what":"Method set_body()","title":"Response — Response","text":"set body response","code":""},{"path":"https://docs.ropensci.org/webmockr/reference/Response.html","id":"usage-8","dir":"Reference","previous_headings":"","what":"Usage","title":"Response — Response","text":"","code":"Response$set_body(body, disk = FALSE)"},{"path":"https://docs.ropensci.org/webmockr/reference/Response.html","id":"arguments-5","dir":"Reference","previous_headings":"","what":"Arguments","title":"Response — Response","text":"body (various types) disk (logical) whether disk; default: FALSE","code":""},{"path":"https://docs.ropensci.org/webmockr/reference/Response.html","id":"returns-7","dir":"Reference","previous_headings":"","what":"Returns","title":"Response — Response","text":"nothing returned; sets body response","code":""},{"path":"https://docs.ropensci.org/webmockr/reference/Response.html","id":"method-get-body-","dir":"Reference","previous_headings":"","what":"Method get_body()","title":"Response — Response","text":"get body response","code":""},{"path":"https://docs.ropensci.org/webmockr/reference/Response.html","id":"usage-9","dir":"Reference","previous_headings":"","what":"Usage","title":"Response — Response","text":"","code":"Response$get_body()"},{"path":"https://docs.ropensci.org/webmockr/reference/Response.html","id":"returns-8","dir":"Reference","previous_headings":"","what":"Returns","title":"Response — Response","text":"various","code":""},{"path":"https://docs.ropensci.org/webmockr/reference/Response.html","id":"method-set-status-","dir":"Reference","previous_headings":"","what":"Method set_status()","title":"Response — Response","text":"set http status response","code":""},{"path":"https://docs.ropensci.org/webmockr/reference/Response.html","id":"usage-10","dir":"Reference","previous_headings":"","what":"Usage","title":"Response — Response","text":"","code":"Response$set_status(status)"},{"path":"https://docs.ropensci.org/webmockr/reference/Response.html","id":"arguments-6","dir":"Reference","previous_headings":"","what":"Arguments","title":"Response — Response","text":"status (integer) http status","code":""},{"path":"https://docs.ropensci.org/webmockr/reference/Response.html","id":"returns-9","dir":"Reference","previous_headings":"","what":"Returns","title":"Response — Response","text":"nothing returned; sets http status response","code":""},{"path":"https://docs.ropensci.org/webmockr/reference/Response.html","id":"method-get-status-","dir":"Reference","previous_headings":"","what":"Method get_status()","title":"Response — Response","text":"get http status response","code":""},{"path":"https://docs.ropensci.org/webmockr/reference/Response.html","id":"usage-11","dir":"Reference","previous_headings":"","what":"Usage","title":"Response — Response","text":"","code":"Response$get_status()"},{"path":"https://docs.ropensci.org/webmockr/reference/Response.html","id":"returns-10","dir":"Reference","previous_headings":"","what":"Returns","title":"Response — Response","text":"(integer) http status","code":""},{"path":"https://docs.ropensci.org/webmockr/reference/Response.html","id":"method-set-exception-","dir":"Reference","previous_headings":"","what":"Method set_exception()","title":"Response — Response","text":"set exception","code":""},{"path":"https://docs.ropensci.org/webmockr/reference/Response.html","id":"usage-12","dir":"Reference","previous_headings":"","what":"Usage","title":"Response — Response","text":"","code":"Response$set_exception(exception)"},{"path":"https://docs.ropensci.org/webmockr/reference/Response.html","id":"arguments-7","dir":"Reference","previous_headings":"","what":"Arguments","title":"Response — Response","text":"exception (character) exception string","code":""},{"path":"https://docs.ropensci.org/webmockr/reference/Response.html","id":"returns-11","dir":"Reference","previous_headings":"","what":"Returns","title":"Response — Response","text":"nothing returned; sets exception","code":""},{"path":"https://docs.ropensci.org/webmockr/reference/Response.html","id":"method-get-exception-","dir":"Reference","previous_headings":"","what":"Method get_exception()","title":"Response — Response","text":"get exception, set","code":""},{"path":"https://docs.ropensci.org/webmockr/reference/Response.html","id":"usage-13","dir":"Reference","previous_headings":"","what":"Usage","title":"Response — Response","text":"","code":"Response$get_exception()"},{"path":"https://docs.ropensci.org/webmockr/reference/Response.html","id":"returns-12","dir":"Reference","previous_headings":"","what":"Returns","title":"Response — Response","text":"(character) exception","code":""},{"path":"https://docs.ropensci.org/webmockr/reference/Response.html","id":"method-clone-","dir":"Reference","previous_headings":"","what":"Method clone()","title":"Response — Response","text":"objects class cloneable method.","code":""},{"path":"https://docs.ropensci.org/webmockr/reference/Response.html","id":"usage-14","dir":"Reference","previous_headings":"","what":"Usage","title":"Response — Response","text":"","code":"Response$clone(deep = FALSE)"},{"path":"https://docs.ropensci.org/webmockr/reference/Response.html","id":"arguments-8","dir":"Reference","previous_headings":"","what":"Arguments","title":"Response — Response","text":"deep Whether make deep clone.","code":""},{"path":"https://docs.ropensci.org/webmockr/reference/Response.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Response — Response","text":"","code":"if (FALSE) { # \\dontrun{ (x <- Response$new())  x$set_url(\"https://httpbin.org/get\") x  x$set_request_headers(list('Content-Type' = \"application/json\")) x x$request_headers  x$set_response_headers(list('Host' = \"httpbin.org\")) x x$response_headers  x$set_status(404) x x$get_status()  x$set_body(\"hello world\") x x$get_body() # raw body x$set_body(charToRaw(\"hello world\")) x x$get_body()  x$set_exception(\"exception\") x x$get_exception() } # }"},{"path":"https://docs.ropensci.org/webmockr/reference/StubCounter.html","id":null,"dir":"Reference","previous_headings":"","what":"StubCounter — StubCounter","title":"StubCounter — StubCounter","text":"hash counter store requests count number requests made stub","code":""},{"path":"https://docs.ropensci.org/webmockr/reference/StubCounter.html","id":"public-fields","dir":"Reference","previous_headings":"","what":"Public fields","title":"StubCounter — StubCounter","text":"hash (list) list internal use , elements key, sig, count","code":""},{"path":[]},{"path":"https://docs.ropensci.org/webmockr/reference/StubCounter.html","id":"public-methods","dir":"Reference","previous_headings":"","what":"Public methods","title":"StubCounter — StubCounter","text":"StubCounter$put() StubCounter$count() StubCounter$clone()","code":""},{"path":"https://docs.ropensci.org/webmockr/reference/StubCounter.html","id":"method-put-","dir":"Reference","previous_headings":"","what":"Method put()","title":"StubCounter — StubCounter","text":"Register request key","code":""},{"path":"https://docs.ropensci.org/webmockr/reference/StubCounter.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"StubCounter — StubCounter","text":"","code":"StubCounter$put(x)"},{"path":"https://docs.ropensci.org/webmockr/reference/StubCounter.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"StubCounter — StubCounter","text":"x object class RequestSignature","code":""},{"path":"https://docs.ropensci.org/webmockr/reference/StubCounter.html","id":"returns","dir":"Reference","previous_headings":"","what":"Returns","title":"StubCounter — StubCounter","text":"nothing returned; registers request & iterates internal counter","code":""},{"path":"https://docs.ropensci.org/webmockr/reference/StubCounter.html","id":"method-count-","dir":"Reference","previous_headings":"","what":"Method count()","title":"StubCounter — StubCounter","text":"Get count number times matching request made stub","code":""},{"path":"https://docs.ropensci.org/webmockr/reference/StubCounter.html","id":"usage-1","dir":"Reference","previous_headings":"","what":"Usage","title":"StubCounter — StubCounter","text":"","code":"StubCounter$count()"},{"path":"https://docs.ropensci.org/webmockr/reference/StubCounter.html","id":"method-clone-","dir":"Reference","previous_headings":"","what":"Method clone()","title":"StubCounter — StubCounter","text":"objects class cloneable method.","code":""},{"path":"https://docs.ropensci.org/webmockr/reference/StubCounter.html","id":"usage-2","dir":"Reference","previous_headings":"","what":"Usage","title":"StubCounter — StubCounter","text":"","code":"StubCounter$clone(deep = FALSE)"},{"path":"https://docs.ropensci.org/webmockr/reference/StubCounter.html","id":"arguments-1","dir":"Reference","previous_headings":"","what":"Arguments","title":"StubCounter — StubCounter","text":"deep Whether make deep clone.","code":""},{"path":"https://docs.ropensci.org/webmockr/reference/StubCounter.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"StubCounter — StubCounter","text":"","code":"x <- StubCounter$new() x #> <StubCounter> #>   Public: #>     clone: function (deep = FALSE)  #>     count: function ()  #>     hash: list #>     put: function (x)  #>   Private: #>     total: 0 x$hash #> list() x$count() #> [1] 0 z <- RequestSignature$new(method = \"get\", uri = \"https:/httpbin.org/get\") x$put(z) x$count() #> [1] 1 x$put(z) x$count() #> [1] 2"},{"path":"https://docs.ropensci.org/webmockr/reference/StubRegistry.html","id":null,"dir":"Reference","previous_headings":"","what":"StubRegistry — StubRegistry","title":"StubRegistry — StubRegistry","text":"stub registry keep track StubbedRequest stubs","code":""},{"path":[]},{"path":"https://docs.ropensci.org/webmockr/reference/StubRegistry.html","id":"public-fields","dir":"Reference","previous_headings":"","what":"Public fields","title":"StubRegistry — StubRegistry","text":"request_stubs (list) list request stubs global_stubs (list) list global stubs","code":""},{"path":[]},{"path":"https://docs.ropensci.org/webmockr/reference/StubRegistry.html","id":"public-methods","dir":"Reference","previous_headings":"","what":"Public methods","title":"StubRegistry — StubRegistry","text":"StubRegistry$print() StubRegistry$register_stub() StubRegistry$find_stubbed_request() StubRegistry$request_stub_for() StubRegistry$remove_request_stub() StubRegistry$remove_all_request_stubs() StubRegistry$is_registered() StubRegistry$clone()","code":""},{"path":"https://docs.ropensci.org/webmockr/reference/StubRegistry.html","id":"method-print-","dir":"Reference","previous_headings":"","what":"Method print()","title":"StubRegistry — StubRegistry","text":"print method StubRegistry class","code":""},{"path":"https://docs.ropensci.org/webmockr/reference/StubRegistry.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"StubRegistry — StubRegistry","text":"","code":"StubRegistry$print(x, ...)"},{"path":"https://docs.ropensci.org/webmockr/reference/StubRegistry.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"StubRegistry — StubRegistry","text":"x self ... ignored","code":""},{"path":"https://docs.ropensci.org/webmockr/reference/StubRegistry.html","id":"method-register-stub-","dir":"Reference","previous_headings":"","what":"Method register_stub()","title":"StubRegistry — StubRegistry","text":"Register stub","code":""},{"path":"https://docs.ropensci.org/webmockr/reference/StubRegistry.html","id":"usage-1","dir":"Reference","previous_headings":"","what":"Usage","title":"StubRegistry — StubRegistry","text":"","code":"StubRegistry$register_stub(stub)"},{"path":"https://docs.ropensci.org/webmockr/reference/StubRegistry.html","id":"arguments-1","dir":"Reference","previous_headings":"","what":"Arguments","title":"StubRegistry — StubRegistry","text":"stub object type StubbedRequest","code":""},{"path":"https://docs.ropensci.org/webmockr/reference/StubRegistry.html","id":"returns","dir":"Reference","previous_headings":"","what":"Returns","title":"StubRegistry — StubRegistry","text":"nothing returned; registers stub","code":""},{"path":"https://docs.ropensci.org/webmockr/reference/StubRegistry.html","id":"method-find-stubbed-request-","dir":"Reference","previous_headings":"","what":"Method find_stubbed_request()","title":"StubRegistry — StubRegistry","text":"Find stubbed request","code":""},{"path":"https://docs.ropensci.org/webmockr/reference/StubRegistry.html","id":"usage-2","dir":"Reference","previous_headings":"","what":"Usage","title":"StubRegistry — StubRegistry","text":"","code":"StubRegistry$find_stubbed_request(req)"},{"path":"https://docs.ropensci.org/webmockr/reference/StubRegistry.html","id":"arguments-2","dir":"Reference","previous_headings":"","what":"Arguments","title":"StubRegistry — StubRegistry","text":"req object class RequestSignature","code":""},{"path":"https://docs.ropensci.org/webmockr/reference/StubRegistry.html","id":"returns-1","dir":"Reference","previous_headings":"","what":"Returns","title":"StubRegistry — StubRegistry","text":"object type StubbedRequest, matched","code":""},{"path":"https://docs.ropensci.org/webmockr/reference/StubRegistry.html","id":"method-request-stub-for-","dir":"Reference","previous_headings":"","what":"Method request_stub_for()","title":"StubRegistry — StubRegistry","text":"Find stubbed request","code":""},{"path":"https://docs.ropensci.org/webmockr/reference/StubRegistry.html","id":"usage-3","dir":"Reference","previous_headings":"","what":"Usage","title":"StubRegistry — StubRegistry","text":"","code":"StubRegistry$request_stub_for(request_signature, count = TRUE)"},{"path":"https://docs.ropensci.org/webmockr/reference/StubRegistry.html","id":"arguments-3","dir":"Reference","previous_headings":"","what":"Arguments","title":"StubRegistry — StubRegistry","text":"request_signature object class RequestSignature count (bool) iterate counter . default: TRUE","code":""},{"path":"https://docs.ropensci.org/webmockr/reference/StubRegistry.html","id":"returns-2","dir":"Reference","previous_headings":"","what":"Returns","title":"StubRegistry — StubRegistry","text":"logical, 1 ","code":""},{"path":"https://docs.ropensci.org/webmockr/reference/StubRegistry.html","id":"method-remove-request-stub-","dir":"Reference","previous_headings":"","what":"Method remove_request_stub()","title":"StubRegistry — StubRegistry","text":"Remove stubbed request matching request signature","code":""},{"path":"https://docs.ropensci.org/webmockr/reference/StubRegistry.html","id":"usage-4","dir":"Reference","previous_headings":"","what":"Usage","title":"StubRegistry — StubRegistry","text":"","code":"StubRegistry$remove_request_stub(stub)"},{"path":"https://docs.ropensci.org/webmockr/reference/StubRegistry.html","id":"arguments-4","dir":"Reference","previous_headings":"","what":"Arguments","title":"StubRegistry — StubRegistry","text":"stub object type StubbedRequest","code":""},{"path":"https://docs.ropensci.org/webmockr/reference/StubRegistry.html","id":"returns-3","dir":"Reference","previous_headings":"","what":"Returns","title":"StubRegistry — StubRegistry","text":"nothing returned; removes stub registry","code":""},{"path":"https://docs.ropensci.org/webmockr/reference/StubRegistry.html","id":"method-remove-all-request-stubs-","dir":"Reference","previous_headings":"","what":"Method remove_all_request_stubs()","title":"StubRegistry — StubRegistry","text":"Remove request stubs","code":""},{"path":"https://docs.ropensci.org/webmockr/reference/StubRegistry.html","id":"usage-5","dir":"Reference","previous_headings":"","what":"Usage","title":"StubRegistry — StubRegistry","text":"","code":"StubRegistry$remove_all_request_stubs()"},{"path":"https://docs.ropensci.org/webmockr/reference/StubRegistry.html","id":"returns-4","dir":"Reference","previous_headings":"","what":"Returns","title":"StubRegistry — StubRegistry","text":"nothing returned; removes request stubs","code":""},{"path":"https://docs.ropensci.org/webmockr/reference/StubRegistry.html","id":"method-is-registered-","dir":"Reference","previous_headings":"","what":"Method is_registered()","title":"StubRegistry — StubRegistry","text":"Find stubbed request","code":""},{"path":"https://docs.ropensci.org/webmockr/reference/StubRegistry.html","id":"usage-6","dir":"Reference","previous_headings":"","what":"Usage","title":"StubRegistry — StubRegistry","text":"","code":"StubRegistry$is_registered(x)"},{"path":"https://docs.ropensci.org/webmockr/reference/StubRegistry.html","id":"arguments-5","dir":"Reference","previous_headings":"","what":"Arguments","title":"StubRegistry — StubRegistry","text":"x object class RequestSignature","code":""},{"path":"https://docs.ropensci.org/webmockr/reference/StubRegistry.html","id":"returns-5","dir":"Reference","previous_headings":"","what":"Returns","title":"StubRegistry — StubRegistry","text":"nothing returned; registers stub","code":""},{"path":"https://docs.ropensci.org/webmockr/reference/StubRegistry.html","id":"method-clone-","dir":"Reference","previous_headings":"","what":"Method clone()","title":"StubRegistry — StubRegistry","text":"objects class cloneable method.","code":""},{"path":"https://docs.ropensci.org/webmockr/reference/StubRegistry.html","id":"usage-7","dir":"Reference","previous_headings":"","what":"Usage","title":"StubRegistry — StubRegistry","text":"","code":"StubRegistry$clone(deep = FALSE)"},{"path":"https://docs.ropensci.org/webmockr/reference/StubRegistry.html","id":"arguments-6","dir":"Reference","previous_headings":"","what":"Arguments","title":"StubRegistry — StubRegistry","text":"deep Whether make deep clone.","code":""},{"path":"https://docs.ropensci.org/webmockr/reference/StubRegistry.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"StubRegistry — StubRegistry","text":"","code":"if (FALSE) { # \\dontrun{ # Make a stub stub1 <- StubbedRequest$new(method = \"get\", uri = \"api.crossref.org\") stub1$with(headers = list('User-Agent' = 'R')) stub1$to_return(status = 200, body = \"foobar\", headers = list()) stub1  # Make another stub stub2 <- StubbedRequest$new(method = \"get\", uri = \"api.crossref.org\") stub2  # Put both stubs in the stub registry reg <- StubRegistry$new() reg$register_stub(stub = stub1) reg$register_stub(stub = stub2) reg reg$request_stubs } # }"},{"path":"https://docs.ropensci.org/webmockr/reference/StubbedRequest.html","id":null,"dir":"Reference","previous_headings":"","what":"StubbedRequest — StubbedRequest","title":"StubbedRequest — StubbedRequest","text":"stubbed request class underlying stub_request()","code":""},{"path":[]},{"path":"https://docs.ropensci.org/webmockr/reference/StubbedRequest.html","id":"public-fields","dir":"Reference","previous_headings":"","what":"Public fields","title":"StubbedRequest — StubbedRequest","text":"method (xx) xx uri (xx) xx uri_regex (xx) xx regex logical uri_parts (xx) xx host (xx) xx query (xx) xx body (xx) xx basic_auth (xx) xx request_headers (xx) xx response_headers (xx) xx responses_sequences (xx) xx status_code (xx) xx counter StubCounter object","code":""},{"path":[]},{"path":"https://docs.ropensci.org/webmockr/reference/StubbedRequest.html","id":"public-methods","dir":"Reference","previous_headings":"","what":"Public methods","title":"StubbedRequest — StubbedRequest","text":"StubbedRequest$new() StubbedRequest$print() StubbedRequest$() StubbedRequest$to_return() StubbedRequest$to_timeout() StubbedRequest$to_raise() StubbedRequest$to_s() StubbedRequest$reset() StubbedRequest$clone()","code":""},{"path":"https://docs.ropensci.org/webmockr/reference/StubbedRequest.html","id":"method-new-","dir":"Reference","previous_headings":"","what":"Method new()","title":"StubbedRequest — StubbedRequest","text":"Create new StubbedRequest object","code":""},{"path":"https://docs.ropensci.org/webmockr/reference/StubbedRequest.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"StubbedRequest — StubbedRequest","text":"","code":"StubbedRequest$new(method, uri = NULL, uri_regex = NULL)"},{"path":"https://docs.ropensci.org/webmockr/reference/StubbedRequest.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"StubbedRequest — StubbedRequest","text":"method HTTP method (, head, get, post, put, patch, delete). \"\" matches HTTP method. required. uri (character) request URI. either uri_regex required. webmockr can match uri's without \"http\" scheme, match scheme \"https\". required, unless uri_regex given. See UriPattern . uri_regex (character) request URI regex. either uri required","code":""},{"path":"https://docs.ropensci.org/webmockr/reference/StubbedRequest.html","id":"returns","dir":"Reference","previous_headings":"","what":"Returns","title":"StubbedRequest — StubbedRequest","text":"new StubbedRequest object","code":""},{"path":"https://docs.ropensci.org/webmockr/reference/StubbedRequest.html","id":"method-print-","dir":"Reference","previous_headings":"","what":"Method print()","title":"StubbedRequest — StubbedRequest","text":"print method StubbedRequest class","code":""},{"path":"https://docs.ropensci.org/webmockr/reference/StubbedRequest.html","id":"usage-1","dir":"Reference","previous_headings":"","what":"Usage","title":"StubbedRequest — StubbedRequest","text":"","code":"StubbedRequest$print(x, ...)"},{"path":"https://docs.ropensci.org/webmockr/reference/StubbedRequest.html","id":"arguments-1","dir":"Reference","previous_headings":"","what":"Arguments","title":"StubbedRequest — StubbedRequest","text":"x self ... ignored","code":""},{"path":"https://docs.ropensci.org/webmockr/reference/StubbedRequest.html","id":"method-with-","dir":"Reference","previous_headings":"","what":"Method with()","title":"StubbedRequest — StubbedRequest","text":"Set expectations given HTTP request","code":""},{"path":"https://docs.ropensci.org/webmockr/reference/StubbedRequest.html","id":"usage-2","dir":"Reference","previous_headings":"","what":"Usage","title":"StubbedRequest — StubbedRequest","text":"","code":"StubbedRequest$with(   query = NULL,   body = NULL,   headers = NULL,   basic_auth = NULL )"},{"path":"https://docs.ropensci.org/webmockr/reference/StubbedRequest.html","id":"arguments-2","dir":"Reference","previous_headings":"","what":"Arguments","title":"StubbedRequest — StubbedRequest","text":"query (list) request query params, named list. optional body (list) request body, named list. optional headers (list) request headers named list. optional. basic_auth (character) basic authentication. optional.","code":""},{"path":"https://docs.ropensci.org/webmockr/reference/StubbedRequest.html","id":"returns-1","dir":"Reference","previous_headings":"","what":"Returns","title":"StubbedRequest — StubbedRequest","text":"nothing returned; sets ","code":""},{"path":"https://docs.ropensci.org/webmockr/reference/StubbedRequest.html","id":"method-to-return-","dir":"Reference","previous_headings":"","what":"Method to_return()","title":"StubbedRequest — StubbedRequest","text":"Set expectations returned HTTP response","code":""},{"path":"https://docs.ropensci.org/webmockr/reference/StubbedRequest.html","id":"usage-3","dir":"Reference","previous_headings":"","what":"Usage","title":"StubbedRequest — StubbedRequest","text":"","code":"StubbedRequest$to_return(status, body, headers)"},{"path":"https://docs.ropensci.org/webmockr/reference/StubbedRequest.html","id":"arguments-3","dir":"Reference","previous_headings":"","what":"Arguments","title":"StubbedRequest — StubbedRequest","text":"status (numeric) HTTP status code body (list) response body, one : character, json, list, raw, numeric, NULL, FALSE, file connection (connetion types supported) headers (list) named list, response headers. optional.","code":""},{"path":"https://docs.ropensci.org/webmockr/reference/StubbedRequest.html","id":"returns-2","dir":"Reference","previous_headings":"","what":"Returns","title":"StubbedRequest — StubbedRequest","text":"nothing returned; sets whats returned","code":""},{"path":"https://docs.ropensci.org/webmockr/reference/StubbedRequest.html","id":"method-to-timeout-","dir":"Reference","previous_headings":"","what":"Method to_timeout()","title":"StubbedRequest — StubbedRequest","text":"Response time ","code":""},{"path":"https://docs.ropensci.org/webmockr/reference/StubbedRequest.html","id":"usage-4","dir":"Reference","previous_headings":"","what":"Usage","title":"StubbedRequest — StubbedRequest","text":"","code":"StubbedRequest$to_timeout()"},{"path":"https://docs.ropensci.org/webmockr/reference/StubbedRequest.html","id":"returns-3","dir":"Reference","previous_headings":"","what":"Returns","title":"StubbedRequest — StubbedRequest","text":"nothing returned","code":""},{"path":"https://docs.ropensci.org/webmockr/reference/StubbedRequest.html","id":"method-to-raise-","dir":"Reference","previous_headings":"","what":"Method to_raise()","title":"StubbedRequest — StubbedRequest","text":"Response raise exception x","code":""},{"path":"https://docs.ropensci.org/webmockr/reference/StubbedRequest.html","id":"usage-5","dir":"Reference","previous_headings":"","what":"Usage","title":"StubbedRequest — StubbedRequest","text":"","code":"StubbedRequest$to_raise(x)"},{"path":"https://docs.ropensci.org/webmockr/reference/StubbedRequest.html","id":"arguments-4","dir":"Reference","previous_headings":"","what":"Arguments","title":"StubbedRequest — StubbedRequest","text":"x (character) exception message","code":""},{"path":"https://docs.ropensci.org/webmockr/reference/StubbedRequest.html","id":"returns-4","dir":"Reference","previous_headings":"","what":"Returns","title":"StubbedRequest — StubbedRequest","text":"nothing returned","code":""},{"path":"https://docs.ropensci.org/webmockr/reference/StubbedRequest.html","id":"method-to-s-","dir":"Reference","previous_headings":"","what":"Method to_s()","title":"StubbedRequest — StubbedRequest","text":"Response character string","code":""},{"path":"https://docs.ropensci.org/webmockr/reference/StubbedRequest.html","id":"usage-6","dir":"Reference","previous_headings":"","what":"Usage","title":"StubbedRequest — StubbedRequest","text":"","code":"StubbedRequest$to_s()"},{"path":"https://docs.ropensci.org/webmockr/reference/StubbedRequest.html","id":"returns-5","dir":"Reference","previous_headings":"","what":"Returns","title":"StubbedRequest — StubbedRequest","text":"(character) response string","code":""},{"path":"https://docs.ropensci.org/webmockr/reference/StubbedRequest.html","id":"method-reset-","dir":"Reference","previous_headings":"","what":"Method reset()","title":"StubbedRequest — StubbedRequest","text":"Reset counter stub","code":""},{"path":"https://docs.ropensci.org/webmockr/reference/StubbedRequest.html","id":"usage-7","dir":"Reference","previous_headings":"","what":"Usage","title":"StubbedRequest — StubbedRequest","text":"","code":"StubbedRequest$reset()"},{"path":"https://docs.ropensci.org/webmockr/reference/StubbedRequest.html","id":"returns-6","dir":"Reference","previous_headings":"","what":"Returns","title":"StubbedRequest — StubbedRequest","text":"nothing returned; resets stub counter requests","code":""},{"path":"https://docs.ropensci.org/webmockr/reference/StubbedRequest.html","id":"method-clone-","dir":"Reference","previous_headings":"","what":"Method clone()","title":"StubbedRequest — StubbedRequest","text":"objects class cloneable method.","code":""},{"path":"https://docs.ropensci.org/webmockr/reference/StubbedRequest.html","id":"usage-8","dir":"Reference","previous_headings":"","what":"Usage","title":"StubbedRequest — StubbedRequest","text":"","code":"StubbedRequest$clone(deep = FALSE)"},{"path":"https://docs.ropensci.org/webmockr/reference/StubbedRequest.html","id":"arguments-5","dir":"Reference","previous_headings":"","what":"Arguments","title":"StubbedRequest — StubbedRequest","text":"deep Whether make deep clone.","code":""},{"path":"https://docs.ropensci.org/webmockr/reference/StubbedRequest.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"StubbedRequest — StubbedRequest","text":"","code":"if (FALSE) { # \\dontrun{ x <- StubbedRequest$new(method = \"get\", uri = \"api.crossref.org\") x$method x$uri x$with(headers = list(\"User-Agent\" = \"R\", apple = \"good\")) x$to_return(status = 200, body = \"foobar\", headers = list(a = 5)) x x$to_s()  # query x <- StubbedRequest$new(method = \"get\", uri = \"httpbin.org\") x$with(query = list(a = 5)) x x$to_s() ## including x <- StubbedRequest$new(method = \"get\", uri = \"httpbin.org\") x$with(query = including(list(a = 5))) x x$to_s() x$with(query = including(list(a = 5, b = 7))) x$to_s() ## excluding x <- StubbedRequest$new(method = \"get\", uri = \"httpbin.org\") x$with(query = excluding(list(a = 5))) x x$to_s()  # many to_return's x <- StubbedRequest$new(method = \"get\", uri = \"httpbin.org\") x$to_return(status = 200, body = \"foobar\", headers = list(a = 5)) x$to_return(status = 200, body = \"bears\", headers = list(b = 6)) x x$to_s()  # raw body x <- StubbedRequest$new(method = \"get\", uri = \"api.crossref.org\") x$to_return(status = 200, body = raw(0), headers = list(a = 5)) x$to_s() x  x <- StubbedRequest$new(method = \"get\", uri = \"api.crossref.org\") x$to_return(   status = 200, body = charToRaw(\"foo bar\"),   headers = list(a = 5) ) x$to_s() x  # basic auth x <- StubbedRequest$new(method = \"get\", uri = \"api.crossref.org\") x$with(basic_auth = c(\"foo\", \"bar\")) x$to_s() x  # file path x <- StubbedRequest$new(method = \"get\", uri = \"api.crossref.org\") f <- tempfile() x$to_return(status = 200, body = file(f), headers = list(a = 5)) x x$to_s() unlink(f)  # to_file(): file path and payload to go into the file #   payload written to file during mocked response creation x <- StubbedRequest$new(method = \"get\", uri = \"api.crossref.org\") f <- tempfile() x$to_return(   status = 200, body = mock_file(f, \"{\\\"foo\\\": \\\"bar\\\"}\"),   headers = list(a = 5) ) x x$to_s() unlink(f)  # uri_regex (x <- StubbedRequest$new(method = \"get\", uri_regex = \".+ossref.org\")) x$method x$uri_regex x$to_s()  # to timeout (x <- StubbedRequest$new(method = \"get\", uri_regex = \".+ossref.org\")) x$to_s() x$to_timeout() x$to_s() x  # to raise library(fauxpas) (x <- StubbedRequest$new(method = \"get\", uri_regex = \".+ossref.org\")) x$to_s() x$to_raise(HTTPBadGateway) x$to_s() x } # }"},{"path":"https://docs.ropensci.org/webmockr/reference/UriPattern.html","id":null,"dir":"Reference","previous_headings":"","what":"UriPattern — UriPattern","title":"UriPattern — UriPattern","text":"uri matcher","code":""},{"path":"https://docs.ropensci.org/webmockr/reference/UriPattern.html","id":"public-fields","dir":"Reference","previous_headings":"","what":"Public fields","title":"UriPattern — UriPattern","text":"pattern (character) pattern holder regex logical query_params list, NULL empty partial bool, default: FALSE partial_type string, default: NULL","code":""},{"path":[]},{"path":"https://docs.ropensci.org/webmockr/reference/UriPattern.html","id":"public-methods","dir":"Reference","previous_headings":"","what":"Public methods","title":"UriPattern — UriPattern","text":"UriPattern$new() UriPattern$matches() UriPattern$pattern_matches() UriPattern$query_params_matches() UriPattern$extract_query() UriPattern$add_query_params() UriPattern$to_s() UriPattern$clone()","code":""},{"path":"https://docs.ropensci.org/webmockr/reference/UriPattern.html","id":"method-new-","dir":"Reference","previous_headings":"","what":"Method new()","title":"UriPattern — UriPattern","text":"Create new UriPattern object","code":""},{"path":"https://docs.ropensci.org/webmockr/reference/UriPattern.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"UriPattern — UriPattern","text":"","code":"UriPattern$new(pattern = NULL, regex_pattern = NULL)"},{"path":"https://docs.ropensci.org/webmockr/reference/UriPattern.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"UriPattern — UriPattern","text":"pattern (character) uri, character string. scheme missing, added (assume http) regex_pattern (character) uri regex character string, see base::regex. scheme missing, added (assume http)","code":""},{"path":"https://docs.ropensci.org/webmockr/reference/UriPattern.html","id":"returns","dir":"Reference","previous_headings":"","what":"Returns","title":"UriPattern — UriPattern","text":"new UriPattern object","code":""},{"path":"https://docs.ropensci.org/webmockr/reference/UriPattern.html","id":"method-matches-","dir":"Reference","previous_headings":"","what":"Method matches()","title":"UriPattern — UriPattern","text":"Match uri pattern","code":""},{"path":"https://docs.ropensci.org/webmockr/reference/UriPattern.html","id":"usage-1","dir":"Reference","previous_headings":"","what":"Usage","title":"UriPattern — UriPattern","text":"","code":"UriPattern$matches(uri)"},{"path":"https://docs.ropensci.org/webmockr/reference/UriPattern.html","id":"arguments-1","dir":"Reference","previous_headings":"","what":"Arguments","title":"UriPattern — UriPattern","text":"uri (character) uri","code":""},{"path":"https://docs.ropensci.org/webmockr/reference/UriPattern.html","id":"returns-1","dir":"Reference","previous_headings":"","what":"Returns","title":"UriPattern — UriPattern","text":"boolean","code":""},{"path":"https://docs.ropensci.org/webmockr/reference/UriPattern.html","id":"method-pattern-matches-","dir":"Reference","previous_headings":"","what":"Method pattern_matches()","title":"UriPattern — UriPattern","text":"Match URI","code":""},{"path":"https://docs.ropensci.org/webmockr/reference/UriPattern.html","id":"usage-2","dir":"Reference","previous_headings":"","what":"Usage","title":"UriPattern — UriPattern","text":"","code":"UriPattern$pattern_matches(uri)"},{"path":"https://docs.ropensci.org/webmockr/reference/UriPattern.html","id":"arguments-2","dir":"Reference","previous_headings":"","what":"Arguments","title":"UriPattern — UriPattern","text":"uri (character) uri","code":""},{"path":"https://docs.ropensci.org/webmockr/reference/UriPattern.html","id":"returns-2","dir":"Reference","previous_headings":"","what":"Returns","title":"UriPattern — UriPattern","text":"boolean","code":""},{"path":"https://docs.ropensci.org/webmockr/reference/UriPattern.html","id":"method-query-params-matches-","dir":"Reference","previous_headings":"","what":"Method query_params_matches()","title":"UriPattern — UriPattern","text":"Match query parameters URI","code":""},{"path":"https://docs.ropensci.org/webmockr/reference/UriPattern.html","id":"usage-3","dir":"Reference","previous_headings":"","what":"Usage","title":"UriPattern — UriPattern","text":"","code":"UriPattern$query_params_matches(uri)"},{"path":"https://docs.ropensci.org/webmockr/reference/UriPattern.html","id":"arguments-3","dir":"Reference","previous_headings":"","what":"Arguments","title":"UriPattern — UriPattern","text":"uri (character) uri","code":""},{"path":"https://docs.ropensci.org/webmockr/reference/UriPattern.html","id":"returns-3","dir":"Reference","previous_headings":"","what":"Returns","title":"UriPattern — UriPattern","text":"boolean","code":""},{"path":"https://docs.ropensci.org/webmockr/reference/UriPattern.html","id":"method-extract-query-","dir":"Reference","previous_headings":"","what":"Method extract_query()","title":"UriPattern — UriPattern","text":"Extract query parameters named list","code":""},{"path":"https://docs.ropensci.org/webmockr/reference/UriPattern.html","id":"usage-4","dir":"Reference","previous_headings":"","what":"Usage","title":"UriPattern — UriPattern","text":"","code":"UriPattern$extract_query(uri)"},{"path":"https://docs.ropensci.org/webmockr/reference/UriPattern.html","id":"arguments-4","dir":"Reference","previous_headings":"","what":"Arguments","title":"UriPattern — UriPattern","text":"uri (character) uri","code":""},{"path":"https://docs.ropensci.org/webmockr/reference/UriPattern.html","id":"returns-4","dir":"Reference","previous_headings":"","what":"Returns","title":"UriPattern — UriPattern","text":"named list, NULL query parameters","code":""},{"path":"https://docs.ropensci.org/webmockr/reference/UriPattern.html","id":"method-add-query-params-","dir":"Reference","previous_headings":"","what":"Method add_query_params()","title":"UriPattern — UriPattern","text":"Add query parameters URI","code":""},{"path":"https://docs.ropensci.org/webmockr/reference/UriPattern.html","id":"usage-5","dir":"Reference","previous_headings":"","what":"Usage","title":"UriPattern — UriPattern","text":"","code":"UriPattern$add_query_params(query_params)"},{"path":"https://docs.ropensci.org/webmockr/reference/UriPattern.html","id":"arguments-5","dir":"Reference","previous_headings":"","what":"Arguments","title":"UriPattern — UriPattern","text":"query_params (list|character) list character","code":""},{"path":"https://docs.ropensci.org/webmockr/reference/UriPattern.html","id":"returns-5","dir":"Reference","previous_headings":"","what":"Returns","title":"UriPattern — UriPattern","text":"nothing returned, updates uri pattern","code":""},{"path":"https://docs.ropensci.org/webmockr/reference/UriPattern.html","id":"method-to-s-","dir":"Reference","previous_headings":"","what":"Method to_s()","title":"UriPattern — UriPattern","text":"Print pattern easy human consumption","code":""},{"path":"https://docs.ropensci.org/webmockr/reference/UriPattern.html","id":"usage-6","dir":"Reference","previous_headings":"","what":"Usage","title":"UriPattern — UriPattern","text":"","code":"UriPattern$to_s()"},{"path":"https://docs.ropensci.org/webmockr/reference/UriPattern.html","id":"returns-6","dir":"Reference","previous_headings":"","what":"Returns","title":"UriPattern — UriPattern","text":"string","code":""},{"path":"https://docs.ropensci.org/webmockr/reference/UriPattern.html","id":"method-clone-","dir":"Reference","previous_headings":"","what":"Method clone()","title":"UriPattern — UriPattern","text":"objects class cloneable method.","code":""},{"path":"https://docs.ropensci.org/webmockr/reference/UriPattern.html","id":"usage-7","dir":"Reference","previous_headings":"","what":"Usage","title":"UriPattern — UriPattern","text":"","code":"UriPattern$clone(deep = FALSE)"},{"path":"https://docs.ropensci.org/webmockr/reference/UriPattern.html","id":"arguments-6","dir":"Reference","previous_headings":"","what":"Arguments","title":"UriPattern — UriPattern","text":"deep Whether make deep clone.","code":""},{"path":"https://docs.ropensci.org/webmockr/reference/UriPattern.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"UriPattern — UriPattern","text":"","code":"# trailing slash (z <- UriPattern$new(pattern = \"http://foobar.com\")) #> <UriPattern> #>   Public: #>     add_query_params: function (query_params)  #>     clone: function (deep = FALSE)  #>     extract_query: function (uri)  #>     initialize: function (pattern = NULL, regex_pattern = NULL)  #>     matches: function (uri)  #>     partial: FALSE #>     partial_type: NULL #>     pattern: http://foobar.com #>     pattern_matches: function (uri)  #>     query_params: NULL #>     query_params_matches: function (uri)  #>     regex: FALSE #>     to_s: function ()  z$matches(\"http://foobar.com\") # TRUE #> [1] TRUE z$matches(\"http://foobar.com/\") # TRUE #> [1] TRUE  # without scheme ## matches http by default: does not match https by default (z <- UriPattern$new(pattern = \"foobar.com\")) #> <UriPattern> #>   Public: #>     add_query_params: function (query_params)  #>     clone: function (deep = FALSE)  #>     extract_query: function (uri)  #>     initialize: function (pattern = NULL, regex_pattern = NULL)  #>     matches: function (uri)  #>     partial: FALSE #>     partial_type: NULL #>     pattern: http://foobar.com #>     pattern_matches: function (uri)  #>     query_params: NULL #>     query_params_matches: function (uri)  #>     regex: FALSE #>     to_s: function ()  z$matches(\"http://foobar.com\") # TRUE #> [1] TRUE z$matches(\"http://foobar.com/\") # TRUE #> [1] TRUE z$matches(\"https://foobar.com\") # FALSE #> [1] FALSE z$matches(\"https://foobar.com/\") # FALSE #> [1] FALSE ## to match https, you'll have to give the complete url (z <- UriPattern$new(pattern = \"https://foobar.com\")) #> <UriPattern> #>   Public: #>     add_query_params: function (query_params)  #>     clone: function (deep = FALSE)  #>     extract_query: function (uri)  #>     initialize: function (pattern = NULL, regex_pattern = NULL)  #>     matches: function (uri)  #>     partial: FALSE #>     partial_type: NULL #>     pattern: https://foobar.com #>     pattern_matches: function (uri)  #>     query_params: NULL #>     query_params_matches: function (uri)  #>     regex: FALSE #>     to_s: function ()  z$matches(\"https://foobar.com/\") # TRUE #> [1] TRUE z$matches(\"http://foobar.com/\") # FALSE #> [1] FALSE  # default ports (z <- UriPattern$new(pattern = \"http://foobar.com\")) #> <UriPattern> #>   Public: #>     add_query_params: function (query_params)  #>     clone: function (deep = FALSE)  #>     extract_query: function (uri)  #>     initialize: function (pattern = NULL, regex_pattern = NULL)  #>     matches: function (uri)  #>     partial: FALSE #>     partial_type: NULL #>     pattern: http://foobar.com #>     pattern_matches: function (uri)  #>     query_params: NULL #>     query_params_matches: function (uri)  #>     regex: FALSE #>     to_s: function ()  z$matches(\"http://foobar.com:80\") # TRUE #> [1] TRUE z$matches(\"http://foobar.com:80/\") # TRUE #> [1] TRUE z$matches(\"http://foobar.com:443\") # TRUE #> [1] TRUE z$matches(\"http://foobar.com:443/\") # TRUE #> [1] TRUE  # user info - FIXME, not sure we support this yet (z <- UriPattern$new(pattern = \"http://foobar.com\")) #> <UriPattern> #>   Public: #>     add_query_params: function (query_params)  #>     clone: function (deep = FALSE)  #>     extract_query: function (uri)  #>     initialize: function (pattern = NULL, regex_pattern = NULL)  #>     matches: function (uri)  #>     partial: FALSE #>     partial_type: NULL #>     pattern: http://foobar.com #>     pattern_matches: function (uri)  #>     query_params: NULL #>     query_params_matches: function (uri)  #>     regex: FALSE #>     to_s: function ()  z$matches(\"http://user:pass@foobar.com\") #> [1] TRUE  # regex (z <- UriPattern$new(regex_pattern = \".+ample\\\\..\")) #> <UriPattern> #>   Public: #>     add_query_params: function (query_params)  #>     clone: function (deep = FALSE)  #>     extract_query: function (uri)  #>     initialize: function (pattern = NULL, regex_pattern = NULL)  #>     matches: function (uri)  #>     partial: FALSE #>     partial_type: NULL #>     pattern: https?://.+ample\\.. #>     pattern_matches: function (uri)  #>     query_params: NULL #>     query_params_matches: function (uri)  #>     regex: TRUE #>     to_s: function ()  z$matches(\"http://sample.org\") # TRUE #> [1] TRUE z$matches(\"http://example.com\") # TRUE #> [1] TRUE z$matches(\"http://tramples.net\") # FALSE #> [1] FALSE  # add query parameters (z <- UriPattern$new(pattern = \"http://foobar.com\")) #> <UriPattern> #>   Public: #>     add_query_params: function (query_params)  #>     clone: function (deep = FALSE)  #>     extract_query: function (uri)  #>     initialize: function (pattern = NULL, regex_pattern = NULL)  #>     matches: function (uri)  #>     partial: FALSE #>     partial_type: NULL #>     pattern: http://foobar.com #>     pattern_matches: function (uri)  #>     query_params: NULL #>     query_params_matches: function (uri)  #>     regex: FALSE #>     to_s: function ()  z$add_query_params(list(pizza = \"cheese\", cheese = \"cheddar\")) z #> <UriPattern> #>   Public: #>     add_query_params: function (query_params)  #>     clone: function (deep = FALSE)  #>     extract_query: function (uri)  #>     initialize: function (pattern = NULL, regex_pattern = NULL)  #>     matches: function (uri)  #>     partial: FALSE #>     partial_type: NULL #>     pattern: http://foobar.com?pizza=cheese&cheese=cheddar #>     pattern_matches: function (uri)  #>     query_params: list #>     query_params_matches: function (uri)  #>     regex: FALSE #>     to_s: function ()  z$pattern #> [1] \"http://foobar.com?pizza=cheese&cheese=cheddar\" z$matches(\"http://foobar.com?pizza=cheese&cheese=cheddar\") # TRUE #> [1] TRUE z$matches(\"http://foobar.com?pizza=cheese&cheese=swiss\") # FALSE #> [1] FALSE  # query parameters in the uri (z <- UriPattern$new(pattern = \"https://httpbin.org/get?stuff=things\")) #> <UriPattern> #>   Public: #>     add_query_params: function (query_params)  #>     clone: function (deep = FALSE)  #>     extract_query: function (uri)  #>     initialize: function (pattern = NULL, regex_pattern = NULL)  #>     matches: function (uri)  #>     partial: FALSE #>     partial_type: NULL #>     pattern: https://httpbin.org/get?stuff=things #>     pattern_matches: function (uri)  #>     query_params: NULL #>     query_params_matches: function (uri)  #>     regex: FALSE #>     to_s: function ()  z$add_query_params() # have to run this method to gather query params z$matches(\"https://httpbin.org/get?stuff=things\") # TRUE #> [1] TRUE z$matches(\"https://httpbin.org/get?stuff2=things\") # FALSE #> [1] FALSE  # regex add query parameters (z <- UriPattern$new(regex_pattern = \"https://foobar.com/.+/order\")) #> <UriPattern> #>   Public: #>     add_query_params: function (query_params)  #>     clone: function (deep = FALSE)  #>     extract_query: function (uri)  #>     initialize: function (pattern = NULL, regex_pattern = NULL)  #>     matches: function (uri)  #>     partial: FALSE #>     partial_type: NULL #>     pattern: https://foobar.com/.+/order #>     pattern_matches: function (uri)  #>     query_params: NULL #>     query_params_matches: function (uri)  #>     regex: TRUE #>     to_s: function ()  z$add_query_params(list(pizza = \"cheese\")) #> NULL z #> <UriPattern> #>   Public: #>     add_query_params: function (query_params)  #>     clone: function (deep = FALSE)  #>     extract_query: function (uri)  #>     initialize: function (pattern = NULL, regex_pattern = NULL)  #>     matches: function (uri)  #>     partial: FALSE #>     partial_type: NULL #>     pattern: https://foobar.com/.+/order #>     pattern_matches: function (uri)  #>     query_params: NULL #>     query_params_matches: function (uri)  #>     regex: TRUE #>     to_s: function ()  z$pattern #> [1] \"https://foobar.com/.+/order\" z$matches(\"https://foobar.com/pizzas/order?pizza=cheese\") # TRUE #> [1] TRUE z$matches(\"https://foobar.com/pizzas?pizza=cheese\") # FALSE #> [1] FALSE  # query parameters in the regex uri (z <- UriPattern$new(regex_pattern = \"https://x.com/.+/order\\\\?fruit=apple\")) #> <UriPattern> #>   Public: #>     add_query_params: function (query_params)  #>     clone: function (deep = FALSE)  #>     extract_query: function (uri)  #>     initialize: function (pattern = NULL, regex_pattern = NULL)  #>     matches: function (uri)  #>     partial: FALSE #>     partial_type: NULL #>     pattern: https://x.com/.+/order\\?fruit=apple #>     pattern_matches: function (uri)  #>     query_params: NULL #>     query_params_matches: function (uri)  #>     regex: TRUE #>     to_s: function ()  z$add_query_params() # have to run this method to gather query params #> NULL z$matches(\"https://x.com/a/order?fruit=apple\") # TRUE #> [1] TRUE z$matches(\"https://x.com/a?fruit=apple\") # FALSE #> [1] FALSE  # any pattern (z <- UriPattern$new(regex_pattern = \"stuff\\\\.com.+\")) #> <UriPattern> #>   Public: #>     add_query_params: function (query_params)  #>     clone: function (deep = FALSE)  #>     extract_query: function (uri)  #>     initialize: function (pattern = NULL, regex_pattern = NULL)  #>     matches: function (uri)  #>     partial: FALSE #>     partial_type: NULL #>     pattern: https?://stuff\\.com.+ #>     pattern_matches: function (uri)  #>     query_params: NULL #>     query_params_matches: function (uri)  #>     regex: TRUE #>     to_s: function ()  z$regex #> [1] TRUE z$pattern #> [1] \"https?://stuff\\\\.com.+\" z$matches(\"http://stuff.com\") # FALSE #> [1] FALSE z$matches(\"https://stuff.com/stff\") # TRUE #> [1] TRUE z$matches(\"https://stuff.com/apple?bears=brown&bats=grey\") # TRUE #> [1] TRUE  # partial matching ## including z <- UriPattern$new(pattern = \"http://foobar.com\") z$add_query_params(including(list(hello = \"world\"))) z$matches(uri = \"http://foobar.com?hello=world&bye=mars\") # TRUE #> [1] TRUE z$matches(\"http://foobar.com?bye=mars\") # FALSE #> [1] FALSE  ## excluding z <- UriPattern$new(pattern = \"http://foobar.com\") z$add_query_params(excluding(list(hello = \"world\"))) z$matches(uri = \"http://foobar.com?hello=world&bye=mars\") # FALSE #> [1] FALSE z$matches(\"http://foobar.com?bye=mars\") # TRUE #> [1] TRUE  ## match on list keys (aka: names) only, ignore values 0 z <- UriPattern$new(pattern = \"http://foobar.com\") z$add_query_params(including(list(hello = NULL))) z$matches(uri = \"http://foobar.com?hello=world&bye=mars\") # TRUE #> [1] TRUE z$matches(\"http://foobar.com?hello=stuff\") # TRUE #> [1] TRUE z$matches(\"http://foobar.com?bye=stuff\") # FALSE #> [1] FALSE"},{"path":"https://docs.ropensci.org/webmockr/reference/build_crul_request.html","id":null,"dir":"Reference","previous_headings":"","what":"Build a crul request — build_crul_request","title":"Build a crul request — build_crul_request","text":"Build crul request","code":""},{"path":"https://docs.ropensci.org/webmockr/reference/build_crul_request.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Build a crul request — build_crul_request","text":"","code":"build_crul_request(x)"},{"path":"https://docs.ropensci.org/webmockr/reference/build_crul_request.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Build a crul request — build_crul_request","text":"x unexecuted crul request object","code":""},{"path":"https://docs.ropensci.org/webmockr/reference/build_crul_request.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Build a crul request — build_crul_request","text":"crul request","code":""},{"path":"https://docs.ropensci.org/webmockr/reference/build_crul_response.html","id":null,"dir":"Reference","previous_headings":"","what":"Build a crul response — build_crul_response","title":"Build a crul response — build_crul_response","text":"Build crul response","code":""},{"path":"https://docs.ropensci.org/webmockr/reference/build_crul_response.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Build a crul response — build_crul_response","text":"","code":"build_crul_response(req, resp)"},{"path":"https://docs.ropensci.org/webmockr/reference/build_crul_response.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Build a crul response — build_crul_response","text":"req request resp response","code":""},{"path":"https://docs.ropensci.org/webmockr/reference/build_crul_response.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Build a crul response — build_crul_response","text":"crul response","code":""},{"path":"https://docs.ropensci.org/webmockr/reference/build_httr2_request.html","id":null,"dir":"Reference","previous_headings":"","what":"Build an httr2 request — build_httr2_request","title":"Build an httr2 request — build_httr2_request","text":"Build httr2 request","code":""},{"path":"https://docs.ropensci.org/webmockr/reference/build_httr2_request.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Build an httr2 request — build_httr2_request","text":"","code":"build_httr2_request(x)"},{"path":"https://docs.ropensci.org/webmockr/reference/build_httr2_request.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Build an httr2 request — build_httr2_request","text":"x unexecuted httr2 request object","code":""},{"path":"https://docs.ropensci.org/webmockr/reference/build_httr2_request.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Build an httr2 request — build_httr2_request","text":"httr2_request","code":""},{"path":"https://docs.ropensci.org/webmockr/reference/build_httr2_response.html","id":null,"dir":"Reference","previous_headings":"","what":"Build a httr2 response (httr2_response) — build_httr2_response","title":"Build a httr2 response (httr2_response) — build_httr2_response","text":"Build httr2 response (httr2_response)","code":""},{"path":"https://docs.ropensci.org/webmockr/reference/build_httr2_response.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Build a httr2 response (httr2_response) — build_httr2_response","text":"","code":"build_httr2_response(req, resp)"},{"path":"https://docs.ropensci.org/webmockr/reference/build_httr2_response.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Build a httr2 response (httr2_response) — build_httr2_response","text":"req request resp response","code":""},{"path":"https://docs.ropensci.org/webmockr/reference/build_httr2_response.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Build a httr2 response (httr2_response) — build_httr2_response","text":"httr2 response (httr2_response)","code":""},{"path":"https://docs.ropensci.org/webmockr/reference/build_httr2_response.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Build a httr2 response (httr2_response) — build_httr2_response","text":"","code":"if (FALSE) { # \\dontrun{ # x <- Httr2Adapter$new() # library(httr2) # req <- request(\"https://r-project.org\") # req = req %>% req_body_json(list(x = 1, y = 2)) # #req$method <- 'POST' # stub_request(\"post\", \"https://r-project.org\") %>% #  to_return(status = 418, body = list(a = 5)) # stub = webmockr_stub_registry$request_stubs[[1]] # stub$counter$.__enclos_env__$private$total <- 1 # resp = x$.__enclos_env__$private$build_stub_response(stub) # resp = x$.__enclos_env__$private$build_response(req, resp) # resp = x$.__enclos_env__$private$add_response_sequences(stub, resp) # out # out$body # out$content } # }"},{"path":"https://docs.ropensci.org/webmockr/reference/build_httr_request.html","id":null,"dir":"Reference","previous_headings":"","what":"Build a httr request — build_httr_request","title":"Build a httr request — build_httr_request","text":"Build httr request","code":""},{"path":"https://docs.ropensci.org/webmockr/reference/build_httr_request.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Build a httr request — build_httr_request","text":"","code":"build_httr_request(x)"},{"path":"https://docs.ropensci.org/webmockr/reference/build_httr_request.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Build a httr request — build_httr_request","text":"x unexecuted httr request object","code":""},{"path":"https://docs.ropensci.org/webmockr/reference/build_httr_request.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Build a httr request — build_httr_request","text":"httr request","code":""},{"path":"https://docs.ropensci.org/webmockr/reference/build_httr_response.html","id":null,"dir":"Reference","previous_headings":"","what":"Build a httr response — build_httr_response","title":"Build a httr response — build_httr_response","text":"Build httr response","code":""},{"path":"https://docs.ropensci.org/webmockr/reference/build_httr_response.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Build a httr response — build_httr_response","text":"","code":"build_httr_response(req, resp)"},{"path":"https://docs.ropensci.org/webmockr/reference/build_httr_response.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Build a httr response — build_httr_response","text":"req request resp response","code":""},{"path":"https://docs.ropensci.org/webmockr/reference/build_httr_response.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Build a httr response — build_httr_response","text":"httr response","code":""},{"path":"https://docs.ropensci.org/webmockr/reference/enable.html","id":null,"dir":"Reference","previous_headings":"","what":"Enable or disable webmockr — enable","title":"Enable or disable webmockr — enable","text":"Enable disable webmockr","code":""},{"path":"https://docs.ropensci.org/webmockr/reference/enable.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Enable or disable webmockr — enable","text":"","code":"enable(adapter = NULL, options = list(), quiet = FALSE)  enabled(adapter = \"crul\")  disable(adapter = NULL, options = list(), quiet = FALSE)"},{"path":"https://docs.ropensci.org/webmockr/reference/enable.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Enable or disable webmockr — enable","text":"adapter (character) adapter name, 'crul', 'httr', 'httr2'. one . none given, attempt enable adapters options list options - ignored now. quiet (logical) suppress messages? default: FALSE","code":""},{"path":"https://docs.ropensci.org/webmockr/reference/enable.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Enable or disable webmockr — enable","text":"enable() disable() invisibly returns booleans adapter, result running enable disable, respectively, HttpLibAdapaterRegistry object. enabled returns single boolean","code":""},{"path":"https://docs.ropensci.org/webmockr/reference/enable.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Enable or disable webmockr — enable","text":"enable() enables webmockr adapters disable() disables webmockr adapters enabled() answers whether webmockr enabled given adapter","code":""},{"path":"https://docs.ropensci.org/webmockr/reference/httr2_mock.html","id":null,"dir":"Reference","previous_headings":"","what":"Turn on httr2 mocking — httr2_mock","title":"Turn on httr2 mocking — httr2_mock","text":"Sets callback routes httr2 requests webmockr","code":""},{"path":"https://docs.ropensci.org/webmockr/reference/httr2_mock.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Turn on httr2 mocking — httr2_mock","text":"","code":"httr2_mock(on = TRUE)"},{"path":"https://docs.ropensci.org/webmockr/reference/httr2_mock.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Turn on httr2 mocking — httr2_mock","text":"(logical) TRUE turn , FALSE turn . default: TRUE","code":""},{"path":"https://docs.ropensci.org/webmockr/reference/httr2_mock.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Turn on httr2 mocking — httr2_mock","text":"Silently returns TRUE enabled FALSE disabled.","code":""},{"path":"https://docs.ropensci.org/webmockr/reference/httr_mock.html","id":null,"dir":"Reference","previous_headings":"","what":"Turn on httr mocking — httr_mock","title":"Turn on httr mocking — httr_mock","text":"Sets callback routes httr requests webmockr","code":""},{"path":"https://docs.ropensci.org/webmockr/reference/httr_mock.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Turn on httr mocking — httr_mock","text":"","code":"httr_mock(on = TRUE)"},{"path":"https://docs.ropensci.org/webmockr/reference/httr_mock.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Turn on httr mocking — httr_mock","text":"(logical) set TRUE turn , FALSE turn . default: TRUE","code":""},{"path":"https://docs.ropensci.org/webmockr/reference/httr_mock.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Turn on httr mocking — httr_mock","text":"Silently returns TRUE enabled FALSE disabled.","code":""},{"path":"https://docs.ropensci.org/webmockr/reference/including.html","id":null,"dir":"Reference","previous_headings":"","what":"Partially match request query parameters or request bodies — including","title":"Partially match request query parameters or request bodies — including","text":"use inside wi_th()","code":""},{"path":"https://docs.ropensci.org/webmockr/reference/including.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Partially match request query parameters or request bodies — including","text":"","code":"including(x)  excluding(x)"},{"path":"https://docs.ropensci.org/webmockr/reference/including.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Partially match request query parameters or request bodies — including","text":"x (list) list; may support classes future","code":""},{"path":"https://docs.ropensci.org/webmockr/reference/including.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Partially match request query parameters or request bodies — including","text":"x, two attributes added: partial_match: always TRUE partial_type: type match, one include exclude","code":""},{"path":"https://docs.ropensci.org/webmockr/reference/including.html","id":"headers","dir":"Reference","previous_headings":"","what":"Headers","title":"Partially match request query parameters or request bodies — including","text":"Matching headers already handles partial matching. , wi_th(headers = list(Fruit = \"pear\")) matches request request header matches - request can request headers, matter long match. helpers (including/excluding) needed query parameters bodies default matching must exact .","code":""},{"path":"https://docs.ropensci.org/webmockr/reference/including.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Partially match request query parameters or request bodies — including","text":"","code":"including(list(foo = \"bar\")) #> <partial match> #>   partial type: include #>   length: 1 excluding(list(foo = \"bar\")) #> <partial match> #>   partial type: exclude #>   length: 1  # get just keys by setting values as NULL including(list(foo = NULL, bar = NULL)) #> <partial match> #>   partial type: include #>   length: 2  # in a stub req <- stub_request(\"get\", \"https://httpbin.org/get\") req #> <webmockr stub>  #>   method: get #>   uri: https://httpbin.org/get #>   with:  #>     query:  #>     body:  #>     request_headers:  #>   to_return:   ## query wi_th(req, query = list(foo = \"bar\")) #> <webmockr stub>  #>   method: get #>   uri: https://httpbin.org/get #>   with:  #>     query: foo=bar #>     body:  #>     request_headers:  #>   to_return:  wi_th(req, query = including(list(foo = \"bar\"))) #> <webmockr stub>  #>   method: get #>   uri: https://httpbin.org/get #>   with:  #>     query: including(foo=bar) #>     body:  #>     request_headers:  #>   to_return:  wi_th(req, query = excluding(list(foo = \"bar\"))) #> <webmockr stub>  #>   method: get #>   uri: https://httpbin.org/get #>   with:  #>     query: excluding(foo=bar) #>     body:  #>     request_headers:  #>   to_return:   ## body wi_th(req, body = list(foo = \"bar\")) #> <webmockr stub>  #>   method: get #>   uri: https://httpbin.org/get #>   with:  #>     query:  #>     body (class: list): foo=bar #>     request_headers:  #>   to_return:  wi_th(req, body = including(list(foo = \"bar\"))) #> <webmockr stub>  #>   method: get #>   uri: https://httpbin.org/get #>   with:  #>     query:  #>     body (class: partial): including(foo=bar) #>     request_headers:  #>   to_return:  wi_th(req, body = excluding(list(foo = \"bar\"))) #> <webmockr stub>  #>   method: get #>   uri: https://httpbin.org/get #>   with:  #>     query:  #>     body (class: partial): excluding(foo=bar) #>     request_headers:  #>   to_return:   # cleanup stub_registry_clear()"},{"path":"https://docs.ropensci.org/webmockr/reference/mock_file.html","id":null,"dir":"Reference","previous_headings":"","what":"Mock file — mock_file","title":"Mock file — mock_file","text":"Mock file","code":""},{"path":"https://docs.ropensci.org/webmockr/reference/mock_file.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Mock file — mock_file","text":"","code":"mock_file(path, payload)"},{"path":"https://docs.ropensci.org/webmockr/reference/mock_file.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Mock file — mock_file","text":"path (character) file path. required payload (character) string written file given path parameter. required","code":""},{"path":"https://docs.ropensci.org/webmockr/reference/mock_file.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Mock file — mock_file","text":"list S3 class mock_file","code":""},{"path":"https://docs.ropensci.org/webmockr/reference/mock_file.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Mock file — mock_file","text":"","code":"mock_file(path = tempfile(), payload = \"{\\\"foo\\\": \\\"bar\\\"}\") #> <mock file> #>  path: /tmp/RtmpaSVAg0/file4ec3e612461 #>  payload: {\"foo\": \"bar\"}"},{"path":"https://docs.ropensci.org/webmockr/reference/mocking-disk-writing.html","id":null,"dir":"Reference","previous_headings":"","what":"Mocking writing to disk — mocking-disk-writing","title":"Mocking writing to disk — mocking-disk-writing","text":"Mocking writing disk","code":""},{"path":"https://docs.ropensci.org/webmockr/reference/mocking-disk-writing.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Mocking writing to disk — mocking-disk-writing","text":"","code":"if (FALSE) { # \\dontrun{ # enable mocking enable() # getOption('httr2_mock')  # Write to a file before mocked request  # crul library(crul) ## make a temp file f <- tempfile(fileext = \".json\") ## write something to the file cat(\"{\\\"hello\\\":\\\"world\\\"}\\n\", file = f) readLines(f) ## make the stub stub_request(\"get\", \"https://httpbin.org/get\") %>%   to_return(body = file(f)) ## make a request (out <- HttpClient$new(\"https://httpbin.org/get\")$get(disk = f)) out$content readLines(out$content)  # httr library(httr) ## make a temp file f <- tempfile(fileext = \".json\") ## write something to the file cat(\"{\\\"hello\\\":\\\"world\\\"}\\n\", file = f) readLines(f) ## make the stub stub_request(\"get\", \"https://httpbin.org/get\") %>%   to_return(body = file(f),    headers = list('content-type' = \"application/json\")) ## make a request ## with httr, you must set overwrite=TRUE or you'll get an errror out <- GET(\"https://httpbin.org/get\", write_disk(f, overwrite=TRUE)) out out$content content(out, \"text\", encoding = \"UTF-8\")  # httr2 library(httr2) ## make a temp file f <- tempfile(fileext = \".json\") ## write something to the file cat(\"{\\\"hello\\\":\\\"world\\\"}\\n\", file = f) readLines(f) ## make the stub stub_request(\"get\", \"https://httpbin.org/get\") %>%   to_return(body = file(f),    headers = list('content-type' = \"application/json\")) ## make a request req <- request(\"https://httpbin.org/get\") out <- req_perform(req, path = f) out out$body out out$headers readLines(out$body)   # Use mock_file to have webmockr handle file and contents  # crul library(crul) f <- tempfile(fileext = \".json\") ## make the stub stub_request(\"get\", \"https://httpbin.org/get\") %>%   to_return(body = mock_file(f, \"{\\\"hello\\\":\\\"mars\\\"}\\n\")) ## make a request (out <- crul::HttpClient$new(\"https://httpbin.org/get\")$get(disk = f)) out$content readLines(out$content)  # httr library(httr) ## make a temp file f <- tempfile(fileext = \".json\") ## make the stub stub_request(\"get\", \"https://httpbin.org/get\") %>%   to_return(     body = mock_file(path = f, payload = \"{\\\"foo\\\": \\\"bar\\\"}\"),     headers = list('content-type' = \"application/json\")   ) ## make a request out <- GET(\"https://httpbin.org/get\", write_disk(f)) out ## view stubbed file content out$content readLines(out$content) content(out, \"text\", encoding = \"UTF-8\")  # httr2 library(httr2) ## make a temp file f <- tempfile(fileext = \".json\") ## make the stub stub_request(\"get\", \"https://httpbin.org/get\") %>%   to_return(     body = mock_file(path = f, payload = \"{\\\"foo\\\": \\\"bar\\\"}\"),     headers = list('content-type' = \"application/json\")   ) ## make a request req <- request(\"https://httpbin.org/get\") out <- req_perform(req, path = f) out ## view stubbed file content out$body readLines(out$body)  # disable mocking disable() } # }"},{"path":"https://docs.ropensci.org/webmockr/reference/pipe.html","id":null,"dir":"Reference","previous_headings":"","what":"Pipe operator — %>%","title":"Pipe operator — %>%","text":"Pipe operator","code":""},{"path":"https://docs.ropensci.org/webmockr/reference/pipe.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Pipe operator — %>%","text":"","code":"lhs %>% rhs"},{"path":"https://docs.ropensci.org/webmockr/reference/pluck_body.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract the body from an HTTP request — pluck_body","title":"Extract the body from an HTTP request — pluck_body","text":"Returns appropriate representation data contained within request body based encoding.","code":""},{"path":"https://docs.ropensci.org/webmockr/reference/pluck_body.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract the body from an HTTP request — pluck_body","text":"","code":"pluck_body(x)"},{"path":"https://docs.ropensci.org/webmockr/reference/pluck_body.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract the body from an HTTP request — pluck_body","text":"x unexecuted crul, httr httr2 request object","code":""},{"path":"https://docs.ropensci.org/webmockr/reference/pluck_body.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract the body from an HTTP request — pluck_body","text":"one following: NULL request associated body NULL upload used list list containing multipart-encoded body character vector JSON- raw-encoded body, upload form file","code":""},{"path":"https://docs.ropensci.org/webmockr/reference/remove_request_stub.html","id":null,"dir":"Reference","previous_headings":"","what":"Remove a request stub — remove_request_stub","title":"Remove a request stub — remove_request_stub","text":"Remove request stub","code":""},{"path":"https://docs.ropensci.org/webmockr/reference/remove_request_stub.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Remove a request stub — remove_request_stub","text":"","code":"remove_request_stub(stub)"},{"path":"https://docs.ropensci.org/webmockr/reference/remove_request_stub.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Remove a request stub — remove_request_stub","text":"stub request stub, class StubbedRequest","code":""},{"path":"https://docs.ropensci.org/webmockr/reference/remove_request_stub.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Remove a request stub — remove_request_stub","text":"logical, TRUE removed, FALSE removed","code":""},{"path":[]},{"path":"https://docs.ropensci.org/webmockr/reference/remove_request_stub.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Remove a request stub — remove_request_stub","text":"","code":"(x <- stub_request(\"get\", \"https://httpbin.org/get\")) #> <webmockr stub>  #>   method: get #>   uri: https://httpbin.org/get #>   with:  #>     query:  #>     body:  #>     request_headers:  #>   to_return:  stub_registry() #> <webmockr stub registry>  #>  Registered Stubs #>    GET: https://httpbin.org/get  remove_request_stub(x) stub_registry() #> <webmockr stub registry>  #>  Registered Stubs"},{"path":"https://docs.ropensci.org/webmockr/reference/request_registry.html","id":null,"dir":"Reference","previous_headings":"","what":"List or clear requests in the request registry — request_registry","title":"List or clear requests in the request registry — request_registry","text":"List clear requests request registry","code":""},{"path":"https://docs.ropensci.org/webmockr/reference/request_registry.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"List or clear requests in the request registry — request_registry","text":"","code":"request_registry()  request_registry_clear()"},{"path":"https://docs.ropensci.org/webmockr/reference/request_registry.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"List or clear requests in the request registry — request_registry","text":"object class RequestRegistry, print method gives requests registry number times one performed","code":""},{"path":"https://docs.ropensci.org/webmockr/reference/request_registry.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"List or clear requests in the request registry — request_registry","text":"request_registry() lists requests made webmockr knows ; request_registry_clear() resets request registry (removes recorded requests)","code":""},{"path":[]},{"path":"https://docs.ropensci.org/webmockr/reference/request_registry.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"List or clear requests in the request registry — request_registry","text":"","code":"webmockr::enable() #> CrulAdapter enabled! #> HttrAdapter enabled! #> Httr2Adapter enabled! stub_request(\"get\", \"https://httpbin.org/get\") %>%   to_return(body = \"success!\", status = 200) #> <webmockr stub>  #>   method: get #>   uri: https://httpbin.org/get #>   with:  #>     query:  #>     body:  #>     request_headers:  #>   to_return:  #>   - status: 200 #>     body: success! #>     response_headers:  #>     should_timeout: FALSE #>     should_raise: FALSE  # nothing in the request registry request_registry() #> <webmockr request registry>  #>  Registered Requests #>   GET:  http://scottchamberlain.info was made 2 times #>  #>   POST:  https://httpbin.org/post was made 1 times #>  #>   GET:  https:/httpbin.org/get   with headers {User-Agent: foobar, stuff: things} was made 1 times #>   # make the request z <- crul::HttpClient$new(url = \"https://httpbin.org\")$get(\"get\")  # check the request registry - the request was made 1 time request_registry() #> <webmockr request registry>  #>  Registered Requests #>   GET:  http://scottchamberlain.info was made 2 times #>  #>   POST:  https://httpbin.org/post was made 1 times #>  #>   GET:  https:/httpbin.org/get   with headers {User-Agent: foobar, stuff: things} was made 1 times #>  #>   GET:  https://httpbin.org/get   with headers {Accept-Encoding: gzip, deflate, Accept: application/json, text/xml, application/xml, */*} was made 1 times #>   # do the request again z <- crul::HttpClient$new(url = \"https://httpbin.org\")$get(\"get\")  # check the request registry - now it's been made 2 times, yay! request_registry() #> <webmockr request registry>  #>  Registered Requests #>   GET:  http://scottchamberlain.info was made 2 times #>  #>   POST:  https://httpbin.org/post was made 1 times #>  #>   GET:  https:/httpbin.org/get   with headers {User-Agent: foobar, stuff: things} was made 1 times #>  #>   GET:  https://httpbin.org/get   with headers {Accept-Encoding: gzip, deflate, Accept: application/json, text/xml, application/xml, */*} was made 2 times #>   # clear the request registry request_registry_clear() webmockr::disable() #> CrulAdapter disabled! #> HttrAdapter disabled! #> Httr2Adapter disabled!"},{"path":"https://docs.ropensci.org/webmockr/reference/stub_registry.html","id":null,"dir":"Reference","previous_headings":"","what":"List stubs in the stub registry — stub_registry","title":"List stubs in the stub registry — stub_registry","text":"List stubs stub registry","code":""},{"path":"https://docs.ropensci.org/webmockr/reference/stub_registry.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"List stubs in the stub registry — stub_registry","text":"","code":"stub_registry()"},{"path":"https://docs.ropensci.org/webmockr/reference/stub_registry.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"List stubs in the stub registry — stub_registry","text":"object class StubRegistry, print method gives stubs registry","code":""},{"path":[]},{"path":"https://docs.ropensci.org/webmockr/reference/stub_registry.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"List stubs in the stub registry — stub_registry","text":"","code":"# make a stub stub_request(\"get\", \"https://httpbin.org/get\") %>%   to_return(body = \"success!\", status = 200) #> <webmockr stub>  #>   method: get #>   uri: https://httpbin.org/get #>   with:  #>     query:  #>     body:  #>     request_headers:  #>   to_return:  #>   - status: 200 #>     body: success! #>     response_headers:  #>     should_timeout: FALSE #>     should_raise: FALSE  # check the stub registry, there should be one in there stub_registry() #> <webmockr stub registry>  #>  Registered Stubs #>    GET: https://httpbin.org/get    | to_return:   with body \"success!\"  with status 200   # make another stub stub_request(\"get\", \"https://httpbin.org/get\") %>%   to_return(body = \"woopsy\", status = 404) #> <webmockr stub>  #>   method: get #>   uri: https://httpbin.org/get #>   with:  #>     query:  #>     body:  #>     request_headers:  #>   to_return:  #>   - status: 404 #>     body: woopsy #>     response_headers:  #>     should_timeout: FALSE #>     should_raise: FALSE  # check the stub registry, now there are two there stub_registry() #> <webmockr stub registry>  #>  Registered Stubs #>    GET: https://httpbin.org/get    | to_return:   with body \"success!\"  with status 200  #>    GET: https://httpbin.org/get    | to_return:   with body \"woopsy\"  with status 404   # to clear the stub registry stub_registry_clear()"},{"path":"https://docs.ropensci.org/webmockr/reference/stub_registry_clear.html","id":null,"dir":"Reference","previous_headings":"","what":"stub_registry_clear — stub_registry_clear","title":"stub_registry_clear — stub_registry_clear","text":"Clear stubs stub registry","code":""},{"path":"https://docs.ropensci.org/webmockr/reference/stub_registry_clear.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"stub_registry_clear — stub_registry_clear","text":"","code":"stub_registry_clear()"},{"path":"https://docs.ropensci.org/webmockr/reference/stub_registry_clear.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"stub_registry_clear — stub_registry_clear","text":"empty list invisibly","code":""},{"path":[]},{"path":"https://docs.ropensci.org/webmockr/reference/stub_registry_clear.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"stub_registry_clear — stub_registry_clear","text":"","code":"(x <- stub_request(\"get\", \"https://httpbin.org/get\")) #> <webmockr stub>  #>   method: get #>   uri: https://httpbin.org/get #>   with:  #>     query:  #>     body:  #>     request_headers:  #>   to_return:  stub_registry() #> <webmockr stub registry>  #>  Registered Stubs #>    GET: https://httpbin.org/get  stub_registry_clear() stub_registry() #> <webmockr stub registry>  #>  Registered Stubs"},{"path":"https://docs.ropensci.org/webmockr/reference/stub_request.html","id":null,"dir":"Reference","previous_headings":"","what":"Stub an http request — stub_request","title":"Stub an http request — stub_request","text":"Stub http request","code":""},{"path":"https://docs.ropensci.org/webmockr/reference/stub_request.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Stub an http request — stub_request","text":"","code":"stub_request(method = \"get\", uri = NULL, uri_regex = NULL)"},{"path":"https://docs.ropensci.org/webmockr/reference/stub_request.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Stub an http request — stub_request","text":"method (character) HTTP method, one \"get\", \"post\", \"put\", \"patch\", \"head\", \"delete\", \"options\" - special \"\" (method) uri (character) request uri. Can full partial uri. webmockr can match uri's without \"http\" scheme, match scheme \"https\". required, unless uri_regex given. See UriPattern . See \"uri vs. uri_regex\" section uri_regex (character) URI represented regex. required, uri given. See examples \"uri vs. uri_regex\" section","code":""},{"path":"https://docs.ropensci.org/webmockr/reference/stub_request.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Stub an http request — stub_request","text":"object class StubbedRequest, print method describing stub.","code":""},{"path":"https://docs.ropensci.org/webmockr/reference/stub_request.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Stub an http request — stub_request","text":"Internally, calls StubbedRequest handles logic See stub_registry() listing stubs, stub_registry_clear() removing stubs remove_request_stub() removing specific stubs multiple stubs match request, use first stub. want use stub created earlier one matches, remove earlier one(s). Note wi_th(): pass query values coerced character class recorded stub. can pass numeric, integer, etc., coerced character. See wi_th() details request body/query/headers to_return() details response status/body/headers handled","code":""},{"path":"https://docs.ropensci.org/webmockr/reference/stub_request.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Stub an http request — stub_request","text":"Trailing slashes dropped stub URIs matching","code":""},{"path":"https://docs.ropensci.org/webmockr/reference/stub_request.html","id":"uri-vs-uri-regex","dir":"Reference","previous_headings":"","what":"uri vs. uri_regex","title":"Stub an http request — stub_request","text":"use uri, compare URIs without query params also query params without URIs. use uri_regex compare URIs query params; just use regex string defined uri_regex pattern call grepl","code":""},{"path":"https://docs.ropensci.org/webmockr/reference/stub_request.html","id":"mocking-writing-to-disk","dir":"Reference","previous_headings":"","what":"Mocking writing to disk","title":"Stub an http request — stub_request","text":"See mocking-disk-writing","code":""},{"path":[]},{"path":"https://docs.ropensci.org/webmockr/reference/stub_request.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Stub an http request — stub_request","text":"","code":"if (FALSE) { # \\dontrun{ # basic stubbing stub_request(\"get\", \"https://httpbin.org/get\") stub_request(\"post\", \"https://httpbin.org/post\")  # any method, use \"any\" stub_request(\"any\", \"https://httpbin.org/get\")  # list stubs stub_registry()  # request headers stub_request(\"get\", \"https://httpbin.org/get\") %>%   wi_th(headers = list(\"User-Agent\" = \"R\"))  # request body stub_request(\"post\", \"https://httpbin.org/post\") %>%   wi_th(body = list(foo = \"bar\")) stub_registry() library(crul) x <- crul::HttpClient$new(url = \"https://httpbin.org\") crul::mock() x$post(\"post\", body = list(foo = \"bar\"))  # add expectation with to_return stub_request(\"get\", \"https://httpbin.org/get\") %>%   wi_th(     query = list(hello = \"world\"),     headers = list(\"User-Agent\" = \"R\")   ) %>%   to_return(status = 200, body = \"stuff\", headers = list(a = 5))  # list stubs again stub_registry()  # regex stub_request(\"get\", uri_regex = \".+ample\\\\..\")  # set stub an expectation to timeout stub_request(\"get\", \"https://httpbin.org/get\") %>% to_timeout() x <- crul::HttpClient$new(url = \"https://httpbin.org\") res <- x$get(\"get\")  # raise exception library(fauxpas) stub_request(\"get\", \"https://httpbin.org/get\") %>% to_raise(HTTPAccepted) stub_request(\"get\", \"https://httpbin.org/get\") %>% to_raise(HTTPAccepted, HTTPGone)  x <- crul::HttpClient$new(url = \"https://httpbin.org\") stub_request(\"get\", \"https://httpbin.org/get\") %>% to_raise(HTTPBadGateway) crul::mock() x$get(\"get\")  # pass a list to .list z <- stub_request(\"get\", \"https://httpbin.org/get\") wi_th(z, .list = list(query = list(foo = \"bar\")))  # just body stub_request(\"any\", uri_regex = \".+\") %>%   wi_th(body = list(foo = \"bar\")) ## with crul library(crul) x <- crul::HttpClient$new(url = \"https://httpbin.org\") crul::mock() x$post(\"post\", body = list(foo = \"bar\")) x$put(\"put\", body = list(foo = \"bar\")) ## with httr library(httr) httr_mock() POST(\"https://example.com\", body = list(foo = \"bar\")) PUT(\"https://google.com\", body = list(foo = \"bar\"))   # just headers headers <- list(   \"Accept-Encoding\" = \"gzip, deflate\",   \"Accept\" = \"application/json, text/xml, application/xml, */*\" ) stub_request(\"any\", uri_regex = \".+\") %>% wi_th(headers = headers) library(crul) x <- crul::HttpClient$new(url = \"https://httpbin.org\", headers = headers) crul::mock() x$post(\"post\") x$put(\"put\", body = list(foo = \"bar\")) x$get(\"put\", query = list(stuff = 3423234L))  # many responses ## the first response matches the first to_return call, and so on stub_request(\"get\", \"https://httpbin.org/get\") %>%   to_return(status = 200, body = \"foobar\", headers = list(a = 5)) %>%   to_return(status = 200, body = \"bears\", headers = list(b = 6)) con <- crul::HttpClient$new(url = \"https://httpbin.org\") con$get(\"get\")$parse(\"UTF-8\") con$get(\"get\")$parse(\"UTF-8\")  ## OR, use times with to_return() to repeat the same response many times library(fauxpas) stub_request(\"get\", \"https://httpbin.org/get\") %>%   to_return(status = 200, body = \"apple-pie\", times = 2) %>%   to_raise(HTTPUnauthorized) con <- crul::HttpClient$new(url = \"https://httpbin.org\") con$get(\"get\")$parse(\"UTF-8\") con$get(\"get\")$parse(\"UTF-8\") con$get(\"get\")$parse(\"UTF-8\")  # partial matching ## query parameters library(httr) enable() ### matches stub_request(\"get\", \"https://hb.opencpu.org/get\") %>%   wi_th(query = including(list(fruit = \"pear\"))) %>%   to_return(body = \"matched on partial query!\") resp <- GET(\"https://hb.opencpu.org/get\",   query = list(fruit = \"pear\", bread = \"scone\")) rawToChar(content(resp)) ### doesn't match stub_registry_clear() stub_request(\"get\", \"https://hb.opencpu.org/get\") %>%   wi_th(query = list(fruit = \"pear\")) %>%   to_return(body = \"didn't match, ugh!\") # GET(\"https://hb.opencpu.org/get\", #  query = list(fruit = \"pear\", meat = \"chicken\"))  ## request body ### matches - including stub_request(\"post\", \"https://hb.opencpu.org/post\") %>%   wi_th(body = including(list(fruit = \"pear\"))) %>%   to_return(body = \"matched on partial body!\") resp <- POST(\"https://hb.opencpu.org/post\",   body = list(fruit = \"pear\", meat = \"chicken\")) rawToChar(content(resp)) ### matches - excluding stub_request(\"post\", \"https://hb.opencpu.org/post\") %>%   wi_th(body = excluding(list(fruit = \"pear\"))) %>%   to_return(body = \"matched on partial body!\") res <- POST(\"https://hb.opencpu.org/post\",   body = list(color = \"blue\")) rawToChar(content(res)) # POST(\"https://hb.opencpu.org/post\", #  body = list(fruit = \"pear\", meat = \"chicken\"))  # clear all stubs stub_registry() stub_registry_clear() } # }"},{"path":"https://docs.ropensci.org/webmockr/reference/to_raise.html","id":null,"dir":"Reference","previous_headings":"","what":"Set raise error condition — to_raise","title":"Set raise error condition — to_raise","text":"Set raise error condition","code":""},{"path":"https://docs.ropensci.org/webmockr/reference/to_raise.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Set raise error condition — to_raise","text":"","code":"to_raise(.data, ...)"},{"path":"https://docs.ropensci.org/webmockr/reference/to_raise.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Set raise error condition — to_raise","text":".data input. Anything can coerced StubbedRequest class object ... One HTTP exceptions fauxpas package. Run grep(\"HTTP*\", getNamespaceExports(\"fauxpas\"), value = TRUE) list possible exceptions","code":""},{"path":"https://docs.ropensci.org/webmockr/reference/to_raise.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Set raise error condition — to_raise","text":"object class StubbedRequest, print method describing stub","code":""},{"path":"https://docs.ropensci.org/webmockr/reference/to_raise.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Set raise error condition — to_raise","text":"behavior future : multiple exceptions passed, first used first mock, second second mock, . Subsequent mocks use last exception now, first exception used get fixed","code":""},{"path":"https://docs.ropensci.org/webmockr/reference/to_raise.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Set raise error condition — to_raise","text":"see examples stub_request()","code":""},{"path":"https://docs.ropensci.org/webmockr/reference/to_raise.html","id":"raise-vs-return","dir":"Reference","previous_headings":"","what":"Raise vs. Return","title":"Set raise error condition — to_raise","text":"to_raise() always raises stop condition, to_return(status=xyz) sets status code returned HTTP response object. want raise stop condition to_raise() want. want raise stop condition use to_return(). Use cases vary. example, unit test may test expecting 503 error; case to_raise() makes sense. another case, unit test expects test aspect HTTP response object httr, httr2, crul typically returns, want to_return().","code":""},{"path":"https://docs.ropensci.org/webmockr/reference/to_return.html","id":null,"dir":"Reference","previous_headings":"","what":"Expectation for what's returned from a stubbed request — to_return","title":"Expectation for what's returned from a stubbed request — to_return","text":"Set response status code, response body, /response headers","code":""},{"path":"https://docs.ropensci.org/webmockr/reference/to_return.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Expectation for what's returned from a stubbed request — to_return","text":"","code":"to_return(.data, ..., .list = list(), times = 1)"},{"path":"https://docs.ropensci.org/webmockr/reference/to_return.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Expectation for what's returned from a stubbed request — to_return","text":".data input. Anything can coerced StubbedRequest class object ... Comma separated list named variables. accepts following: status, body, headers. See Details . .list named list, one 'status', 'body', /'headers'. alternative passing via .... pass thing , e.g. pass 'status' ..., also 'status' parameter times (integer) number times given response returned; default: 1. value must greater equal 1. large values probably make sense, maximum value. See Details.","code":""},{"path":"https://docs.ropensci.org/webmockr/reference/to_return.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Expectation for what's returned from a stubbed request — to_return","text":"object class StubbedRequest, print method describing stub","code":""},{"path":"https://docs.ropensci.org/webmockr/reference/to_return.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Expectation for what's returned from a stubbed request — to_return","text":"Values status, body, headers: status: (numeric/integer) three digit status code body: various: character, json, list, raw, numeric, NULL, FALSE, file connection (connetion types supported), mock_file function call (see mock_file()) headers: (list) named list, must named response headers returned lowercase names values type character. numeric/integer values given (e.g., to_return(headers = list(= 10))), coerce numeric/integer values character.","code":""},{"path":"https://docs.ropensci.org/webmockr/reference/to_return.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Expectation for what's returned from a stubbed request — to_return","text":"see examples stub_request()","code":""},{"path":"https://docs.ropensci.org/webmockr/reference/to_return.html","id":"multiple-to-return-","dir":"Reference","previous_headings":"","what":"multiple to_return()","title":"Expectation for what's returned from a stubbed request — to_return","text":"can add one to_return() webmockr stub (including to_raise(), to_timeout()). one HTTP response returned. , match HTTP request based stub_request() wi_th(); first time request made, first response returned; second time reqeust made, second response returned; . aware webmockr track number requests (see request_registry()), use multiple to_return() times parameter, must clear request registry order go back mocking responses start . webmockr_reset() clears stub registry  request registry, can use multiple responses (creating stub(s) course)","code":""},{"path":"https://docs.ropensci.org/webmockr/reference/to_return.html","id":"raise-vs-return","dir":"Reference","previous_headings":"","what":"Raise vs. Return","title":"Expectation for what's returned from a stubbed request — to_return","text":"to_raise() always raises stop condition, to_return(status=xyz) sets status code returned HTTP response object. want raise stop condition to_raise() want. want raise stop condition use to_return(). Use cases vary. example, unit test may test expecting 503 error; case to_raise() makes sense. another case, unit test expects test aspect HTTP response object httr, httr2, crul typically returns, want to_return().","code":""},{"path":"https://docs.ropensci.org/webmockr/reference/to_return.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Expectation for what's returned from a stubbed request — to_return","text":"","code":"# first, make a stub object foo <- function() {   stub_request(\"post\", \"https://httpbin.org/post\") }  # add status, body and/or headers foo() %>% to_return(status = 200) #> <webmockr stub>  #>   method: post #>   uri: https://httpbin.org/post #>   with:  #>     query:  #>     body:  #>     request_headers:  #>   to_return:  #>   - status: 200 #>     body:  #>     response_headers:  #>     should_timeout: FALSE #>     should_raise: FALSE foo() %>% to_return(body = \"stuff\") #> <webmockr stub>  #>   method: post #>   uri: https://httpbin.org/post #>   with:  #>     query:  #>     body:  #>     request_headers:  #>   to_return:  #>   - status:  #>     body: stuff #>     response_headers:  #>     should_timeout: FALSE #>     should_raise: FALSE foo() %>% to_return(body = list(a = list(b = \"world\"))) #> <webmockr stub>  #>   method: post #>   uri: https://httpbin.org/post #>   with:  #>     query:  #>     body:  #>     request_headers:  #>   to_return:  #>   - status:  #>     body: a = list(b = \"world\") #>     response_headers:  #>     should_timeout: FALSE #>     should_raise: FALSE foo() %>% to_return(headers = list(a = 5)) #> <webmockr stub>  #>   method: post #>   uri: https://httpbin.org/post #>   with:  #>     query:  #>     body:  #>     request_headers:  #>   to_return:  #>   - status:  #>     body:  #>     response_headers: a=5 #>     should_timeout: FALSE #>     should_raise: FALSE foo() %>%    to_return(status = 200, body = \"stuff\", headers = list(a = 5)) #> <webmockr stub>  #>   method: post #>   uri: https://httpbin.org/post #>   with:  #>     query:  #>     body:  #>     request_headers:  #>   to_return:  #>   - status: 200 #>     body: stuff #>     response_headers: a=5 #>     should_timeout: FALSE #>     should_raise: FALSE  # .list - pass in a named list instead foo() %>% to_return(.list = list(body = list(foo = \"bar\"))) #> <webmockr stub>  #>   method: post #>   uri: https://httpbin.org/post #>   with:  #>     query:  #>     body:  #>     request_headers:  #>   to_return:  #>   - status:  #>     body: foo=bar #>     response_headers:  #>     should_timeout: FALSE #>     should_raise: FALSE  # multiple responses using chained `to_return()` foo() %>% to_return(body = \"stuff\") %>% to_return(body = \"things\") #> <webmockr stub>  #>   method: post #>   uri: https://httpbin.org/post #>   with:  #>     query:  #>     body:  #>     request_headers:  #>   to_return:  #>   - status:  #>     body: stuff #>     response_headers:  #>     should_timeout: FALSE #>     should_raise: FALSE #>   - status:  #>     body: things #>     response_headers:  #>     should_timeout: FALSE #>     should_raise: FALSE  # many of the same response using the times parameter foo() %>% to_return(body = \"stuff\", times = 3) #> <webmockr stub>  #>   method: post #>   uri: https://httpbin.org/post #>   with:  #>     query:  #>     body:  #>     request_headers:  #>   to_return:  #>   - status:  #>     body: stuff #>     response_headers:  #>     should_timeout: FALSE #>     should_raise: FALSE #>   - status:  #>     body: stuff #>     response_headers:  #>     should_timeout: FALSE #>     should_raise: FALSE #>   - status:  #>     body: stuff #>     response_headers:  #>     should_timeout: FALSE #>     should_raise: FALSE"},{"path":"https://docs.ropensci.org/webmockr/reference/to_return_-defunct.html","id":null,"dir":"Reference","previous_headings":"","what":"This function is defunct. — to_return_","title":"This function is defunct. — to_return_","text":"function defunct.","code":""},{"path":"https://docs.ropensci.org/webmockr/reference/to_return_-defunct.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"This function is defunct. — to_return_","text":"","code":"to_return_(...)"},{"path":"https://docs.ropensci.org/webmockr/reference/to_timeout.html","id":null,"dir":"Reference","previous_headings":"","what":"Set timeout as an expected return on a match — to_timeout","title":"Set timeout as an expected return on a match — to_timeout","text":"Set timeout expected return match","code":""},{"path":"https://docs.ropensci.org/webmockr/reference/to_timeout.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Set timeout as an expected return on a match — to_timeout","text":"","code":"to_timeout(.data)"},{"path":"https://docs.ropensci.org/webmockr/reference/to_timeout.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Set timeout as an expected return on a match — to_timeout","text":".data input. Anything can coerced StubbedRequest class object","code":""},{"path":"https://docs.ropensci.org/webmockr/reference/to_timeout.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Set timeout as an expected return on a match — to_timeout","text":"object class StubbedRequest, print method describing stub","code":""},{"path":"https://docs.ropensci.org/webmockr/reference/to_timeout.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Set timeout as an expected return on a match — to_timeout","text":"see examples stub_request()","code":""},{"path":"https://docs.ropensci.org/webmockr/reference/webmockr-defunct.html","id":null,"dir":"Reference","previous_headings":"","what":"Defunct functions in webmockr — webmockr-defunct","title":"Defunct functions in webmockr — webmockr-defunct","text":"webmockr_enable(): Function removed, see enable() webmockr_disable(): Function removed, see disable() to_return_: to_return() available now wi_th_: wi_th() available now","code":""},{"path":"https://docs.ropensci.org/webmockr/reference/webmockr-package.html","id":null,"dir":"Reference","previous_headings":"","what":"webmockr: Stubbing and Setting Expectations on 'HTTP' Requests — webmockr-package","title":"webmockr: Stubbing and Setting Expectations on 'HTTP' Requests — webmockr-package","text":"Stubbing setting expectations 'HTTP' requests. Includes tools stubbing 'HTTP' requests, including expected request conditions response conditions. Match 'HTTP' method, query parameters, request body, headers . Can used unit tests outside testing context.","code":""},{"path":"https://docs.ropensci.org/webmockr/reference/webmockr-package.html","id":"features","dir":"Reference","previous_headings":"","what":"Features","title":"webmockr: Stubbing and Setting Expectations on 'HTTP' Requests — webmockr-package","text":"Stubbing HTTP requests low http client lib level Setting verifying expectations HTTP requests Matching requests based method, URI, headers body Supports multiple HTTP libraries, including crul, httr, httr2 Integration HTTP test caching library vcr Supports async http request mocking crul ","code":""},{"path":[]},{"path":"https://docs.ropensci.org/webmockr/reference/webmockr-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"webmockr: Stubbing and Setting Expectations on 'HTTP' Requests — webmockr-package","text":"Maintainer: Scott Chamberlain myrmecocystus+r@gmail.com (ORCID) contributors: Aaron Wolen (ORCID) [contributor] rOpenSci (https://ropensci.org) [funder]","code":""},{"path":"https://docs.ropensci.org/webmockr/reference/webmockr-package.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"webmockr: Stubbing and Setting Expectations on 'HTTP' Requests — webmockr-package","text":"","code":"library(webmockr) stub_request(\"get\", \"https://httpbin.org/get\") #> <webmockr stub>  #>   method: get #>   uri: https://httpbin.org/get #>   with:  #>     query:  #>     body:  #>     request_headers:  #>   to_return:  stub_request(\"post\", \"https://httpbin.org/post\") #> <webmockr stub>  #>   method: post #>   uri: https://httpbin.org/post #>   with:  #>     query:  #>     body:  #>     request_headers:  #>   to_return:  stub_registry() #> <webmockr stub registry>  #>  Registered Stubs #>    POST: https://httpbin.org/post    | to_return:    with status 200  #>    POST: https://httpbin.org/post    | to_return:   with body \"stuff\"  #>    POST: https://httpbin.org/post    | to_return:   with body {\"a\":{\"b\":\"world\"}}  #>    POST: https://httpbin.org/post    | to_return:     with headers {\"a\":5}  #>    POST: https://httpbin.org/post    | to_return:   with body \"stuff\"  with status 200  with headers {\"a\":5}  #>    POST: https://httpbin.org/post    | to_return:   with body {\"foo\":\"bar\"}  #>    POST: https://httpbin.org/post    | to_return:   with body \"stuff\"     | to_return:   with body \"things\"  #>    POST: https://httpbin.org/post    | to_return:   with body \"stuff\"     | to_return:   with body \"stuff\"     | to_return:   with body \"stuff\"  #>    GET: https://httpbin.org/get  #>    POST: https://httpbin.org/post"},{"path":"https://docs.ropensci.org/webmockr/reference/webmockr_configure.html","id":null,"dir":"Reference","previous_headings":"","what":"webmockr configuration — webmockr_configure","title":"webmockr configuration — webmockr_configure","text":"webmockr configuration","code":""},{"path":"https://docs.ropensci.org/webmockr/reference/webmockr_configure.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"webmockr configuration — webmockr_configure","text":"","code":"webmockr_configure(   allow_net_connect = FALSE,   allow_localhost = FALSE,   allow = NULL,   show_stubbing_instructions = TRUE )  webmockr_configure_reset()  webmockr_configuration()  webmockr_allow_net_connect()  webmockr_disable_net_connect(allow = NULL)  webmockr_net_connect_allowed(uri = NULL)"},{"path":"https://docs.ropensci.org/webmockr/reference/webmockr_configure.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"webmockr configuration — webmockr_configure","text":"allow_net_connect (logical) Default: FALSE allow_localhost (logical) Default: FALSE allow (character) one URI/URL allow (extension others allowed) show_stubbing_instructions (logical) Default: TRUE. FALSE, stubbing instructions shown uri (character) URI/URL character string - determine whether allowed","code":""},{"path":"https://docs.ropensci.org/webmockr/reference/webmockr_configure.html","id":"webmockr-allow-net-connect","dir":"Reference","previous_headings":"","what":"webmockr_allow_net_connect","title":"webmockr configuration — webmockr_configure","text":"stubs found request, even net connections allowed (running webmockr_allow_net_connect()) stubbed response returned. stub found, net connections allowed, real HTTP request can made.","code":""},{"path":"https://docs.ropensci.org/webmockr/reference/webmockr_configure.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"webmockr configuration — webmockr_configure","text":"","code":"if (FALSE) { # \\dontrun{ webmockr_configure() webmockr_configure(  allow_localhost = TRUE ) webmockr_configuration() webmockr_configure_reset()  webmockr_allow_net_connect() webmockr_net_connect_allowed()  # disable net connect for any URIs webmockr_disable_net_connect() ### gives NULL with no URI passed webmockr_net_connect_allowed() # disable net connect EXCEPT FOR given URIs webmockr_disable_net_connect(allow = \"google.com\") ### is a specific URI allowed? webmockr_net_connect_allowed(\"google.com\") } # }"},{"path":"https://docs.ropensci.org/webmockr/reference/webmockr_crul_fetch.html","id":null,"dir":"Reference","previous_headings":"","what":"execute a curl request — webmockr_crul_fetch","title":"execute a curl request — webmockr_crul_fetch","text":"execute curl request","code":""},{"path":"https://docs.ropensci.org/webmockr/reference/webmockr_crul_fetch.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"execute a curl request — webmockr_crul_fetch","text":"","code":"webmockr_crul_fetch(x)"},{"path":"https://docs.ropensci.org/webmockr/reference/webmockr_crul_fetch.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"execute a curl request — webmockr_crul_fetch","text":"x object","code":""},{"path":"https://docs.ropensci.org/webmockr/reference/webmockr_crul_fetch.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"execute a curl request — webmockr_crul_fetch","text":"curl response","code":""},{"path":"https://docs.ropensci.org/webmockr/reference/webmockr_disable-defunct.html","id":null,"dir":"Reference","previous_headings":"","what":"This function is defunct. — webmockr_disable","title":"This function is defunct. — webmockr_disable","text":"function defunct.","code":""},{"path":"https://docs.ropensci.org/webmockr/reference/webmockr_disable-defunct.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"This function is defunct. — webmockr_disable","text":"","code":"webmockr_disable(...)"},{"path":"https://docs.ropensci.org/webmockr/reference/webmockr_enable-defunct.html","id":null,"dir":"Reference","previous_headings":"","what":"This function is defunct. — webmockr_enable","title":"This function is defunct. — webmockr_enable","text":"function defunct.","code":""},{"path":"https://docs.ropensci.org/webmockr/reference/webmockr_enable-defunct.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"This function is defunct. — webmockr_enable","text":"","code":"webmockr_enable(...)"},{"path":"https://docs.ropensci.org/webmockr/reference/webmockr_reset.html","id":null,"dir":"Reference","previous_headings":"","what":"webmockr_reset — webmockr_reset","title":"webmockr_reset — webmockr_reset","text":"Clear stubs request counter","code":""},{"path":"https://docs.ropensci.org/webmockr/reference/webmockr_reset.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"webmockr_reset — webmockr_reset","text":"","code":"webmockr_reset()"},{"path":"https://docs.ropensci.org/webmockr/reference/webmockr_reset.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"webmockr_reset — webmockr_reset","text":"nothing","code":""},{"path":"https://docs.ropensci.org/webmockr/reference/webmockr_reset.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"webmockr_reset — webmockr_reset","text":"function runs stub_registry_clear() request_registry_clear() - can run two achieve thing","code":""},{"path":[]},{"path":"https://docs.ropensci.org/webmockr/reference/webmockr_reset.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"webmockr_reset — webmockr_reset","text":"","code":"# webmockr_reset()"},{"path":"https://docs.ropensci.org/webmockr/reference/wi_th.html","id":null,"dir":"Reference","previous_headings":"","what":"Set additional parts of a stubbed request — wi_th","title":"Set additional parts of a stubbed request — wi_th","text":"Set query params, request body, request headers /basic_auth","code":""},{"path":"https://docs.ropensci.org/webmockr/reference/wi_th.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Set additional parts of a stubbed request — wi_th","text":"","code":"wi_th(.data, ..., .list = list())"},{"path":"https://docs.ropensci.org/webmockr/reference/wi_th.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Set additional parts of a stubbed request — wi_th","text":".data input. Anything can coerced StubbedRequest class object ... Comma separated list named variables. accepts following: query, body, headers, basic_auth. See Details. .list named list, one query, body, headers /basic_auth. alternative passing via .... pass thing , e.g. pass 'query' ..., also 'query' parameter","code":""},{"path":"https://docs.ropensci.org/webmockr/reference/wi_th.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Set additional parts of a stubbed request — wi_th","text":"object class StubbedRequest, print method describing stub","code":""},{"path":"https://docs.ropensci.org/webmockr/reference/wi_th.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Set additional parts of a stubbed request — wi_th","text":"function base package, went wi_th Values query, body, headers, basic_auth: query: (list) named list. values coerced character class recorded stub. can pass numeric, integer, etc., coerced character. body: various, including character string, list, raw, numeric, upload (crul::upload(), httr::upload_file(), curl::form_file(), curl::form_data() create object end). special case empty request body use NA instead NULL NULL determine user supply body supplied NULL indicate empty body. headers: (list) named list basic_auth: (character) length two vector, username password. authentication type (basic/digest/ntlm/etc.) ignored. , mocking authenciation right now take account authentication type. checking username/password except detect edge cases example, username/password probably set user purpose (e.g., URL picked environment variable) Note regex matching query, body, headers. tested matches following ways: query: compare stubs requests identical(). compares named lists, list names values compared body: varies depending body format (list vs. character, etc.) headers: compare stub request values ==. list names compared %%. basic_auth included headers (name Authorization)","code":""},{"path":"https://docs.ropensci.org/webmockr/reference/wi_th.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Set additional parts of a stubbed request — wi_th","text":"see examples stub_request()","code":""},{"path":[]},{"path":"https://docs.ropensci.org/webmockr/reference/wi_th.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Set additional parts of a stubbed request — wi_th","text":"","code":"# first, make a stub object req <- stub_request(\"post\", \"https://httpbin.org/post\")  # add body # list wi_th(req, body = list(foo = \"bar\")) #> <webmockr stub>  #>   method: post #>   uri: https://httpbin.org/post #>   with:  #>     query:  #>     body (class: list): foo=bar #>     request_headers:  #>   to_return:  # string wi_th(req, body = '{\"foo\": \"bar\"}') #> <webmockr stub>  #>   method: post #>   uri: https://httpbin.org/post #>   with:  #>     query:  #>     body (class: character): {\"foo\": \"bar\"} #>     request_headers:  #>   to_return:  # raw wi_th(req, body = charToRaw('{\"foo\": \"bar\"}')) #> <webmockr stub>  #>   method: post #>   uri: https://httpbin.org/post #>   with:  #>     query:  #>     body (class: raw): raw bytes, length: 14 #>     request_headers:  #>   to_return:  # numeric wi_th(req, body = 5) #> <webmockr stub>  #>   method: post #>   uri: https://httpbin.org/post #>   with:  #>     query:  #>     body (class: numeric): 5 #>     request_headers:  #>   to_return:  # an upload wi_th(req, body = crul::upload(system.file(\"CITATION\"))) #> <webmockr stub>  #>   method: post #>   uri: https://httpbin.org/post #>   with:  #>     query:  #>     body (class: form_file): crul::upload(\"/usr/lib/R/library/base/CITATION\", type=\"text/plain\") #>     request_headers:  #>   to_return:  # wi_th(req, body = httr::upload_file(system.file(\"CITATION\")))  # add query - has to be a named list wi_th(req, query = list(foo = \"bar\")) #> <webmockr stub>  #>   method: post #>   uri: https://httpbin.org/post #>   with:  #>     query: foo=bar #>     body:  #>     request_headers:  #>   to_return:   # add headers - has to be a named list wi_th(req, headers = list(foo = \"bar\")) #> <webmockr stub>  #>   method: post #>   uri: https://httpbin.org/post #>   with:  #>     query:  #>     body:  #>     request_headers: foo=bar #>   to_return:  wi_th(req, headers = list(`User-Agent` = \"webmockr/v1\", hello = \"world\")) #> <webmockr stub>  #>   method: post #>   uri: https://httpbin.org/post #>   with:  #>     query:  #>     body:  #>     request_headers: User-Agent=webmockr/v1, hello=world #>   to_return:   # .list - pass in a named list instead wi_th(req, .list = list(body = list(foo = \"bar\"))) #> <webmockr stub>  #>   method: post #>   uri: https://httpbin.org/post #>   with:  #>     query:  #>     body (class: list): foo=bar #>     request_headers:  #>   to_return:   # basic authentication wi_th(req, basic_auth = c(\"user\", \"pass\")) #> <webmockr stub>  #>   method: post #>   uri: https://httpbin.org/post #>   with:  #>     query:  #>     body:  #>     request_headers: Authorization=Basic dXNlcjpwYXNz #>   to_return:  wi_th(req, basic_auth = c(\"user\", \"pass\"), headers = list(foo = \"bar\")) #> <webmockr stub>  #>   method: post #>   uri: https://httpbin.org/post #>   with:  #>     query:  #>     body:  #>     request_headers: Authorization=Basic dXNlcjpwYXNz, foo=bar #>   to_return:   # partial matching, query params ## including wi_th(req, query = including(list(foo = \"bar\"))) #> <webmockr stub>  #>   method: post #>   uri: https://httpbin.org/post #>   with:  #>     query: including(foo=bar) #>     body:  #>     request_headers:  #>   to_return:  ## excluding wi_th(req, query = excluding(list(foo = \"bar\"))) #> <webmockr stub>  #>   method: post #>   uri: https://httpbin.org/post #>   with:  #>     query: excluding(foo=bar) #>     body:  #>     request_headers:  #>   to_return:   # partial matching, body ## including wi_th(req, body = including(list(foo = \"bar\"))) #> <webmockr stub>  #>   method: post #>   uri: https://httpbin.org/post #>   with:  #>     query:  #>     body (class: partial): including(foo=bar) #>     request_headers:  #>   to_return:  ## excluding wi_th(req, body = excluding(list(foo = \"bar\"))) #> <webmockr stub>  #>   method: post #>   uri: https://httpbin.org/post #>   with:  #>     query:  #>     body (class: partial): excluding(foo=bar) #>     request_headers:  #>   to_return:"},{"path":"https://docs.ropensci.org/webmockr/reference/wi_th_-defunct.html","id":null,"dir":"Reference","previous_headings":"","what":"This function is defunct. — wi_th_","title":"This function is defunct. — wi_th_","text":"function defunct.","code":""},{"path":"https://docs.ropensci.org/webmockr/reference/wi_th_-defunct.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"This function is defunct. — wi_th_","text":"","code":"wi_th_(...)"},{"path":"https://docs.ropensci.org/webmockr/news/index.html","id":"webmockr-100","dir":"Changelog","previous_headings":"","what":"webmockr 1.0.0","title":"webmockr 1.0.0","text":"CRAN release: 2024-07-23","code":""},{"path":"https://docs.ropensci.org/webmockr/news/index.html","id":"new-features-1-0-0","dir":"Changelog","previous_headings":"","what":"NEW FEATURES","title":"webmockr 1.0.0","text":"webmockr now supports httr2 library, addition httr crul. Note ’ll see different behavior httr2 relative 2 http clients turns http errors (http statuses 400 ) R errors (#122) webmockr can now mock async http requests crul (w/ crul v1.5 greater). change required webmockr happen. PR merged crul hook webmockr. ’s support async httr package async support httr2 req_perform_parallel mocking hook req_perform (#124)","code":""},{"path":"https://docs.ropensci.org/webmockr/news/index.html","id":"webmockr-090","dir":"Changelog","previous_headings":"","what":"webmockr 0.9.0","title":"webmockr 0.9.0","text":"CRAN release: 2023-02-28","code":""},{"path":"https://docs.ropensci.org/webmockr/news/index.html","id":"bug-fixes-0-9-0","dir":"Changelog","previous_headings":"","what":"BUG FIXES","title":"webmockr 0.9.0","text":"to_return() supports returning multiple responses match many requests matching stub. however, internals broken , now fixed (#115) thanks @kenahoo report matching stubs specifying request body match (e.g., stub_request('post', 'https://httpbin.org/post') %>% wi_th(body = list(=5))) working cases; internal matching logic borked. now fixed. (#118) thanks @konradoberwimmer report status parameter to_return() documented accept integer, errored integer passed (e.g., to_return(status=200L)). bug now fixed (#117) thanks @maelle report","code":""},{"path":"https://docs.ropensci.org/webmockr/news/index.html","id":"minor-improvements-0-9-0","dir":"Changelog","previous_headings":"","what":"MINOR IMPROVEMENTS","title":"webmockr 0.9.0","text":"Config options changes (see webmockr_configure()). Three options presentg implemented now removed: show_body_diff, query_values_notation, net_http_connect_on_start. One option present implemented yet now implemented: show_stubbing_instructions (#27) (#120)","code":""},{"path":"https://docs.ropensci.org/webmockr/news/index.html","id":"documentation-0-9-0","dir":"Changelog","previous_headings":"","what":"DOCUMENTATION","title":"webmockr 0.9.0","text":"StubCounter added pkgdown docs page https://docs.ropensci.org/webmockr/reference/StubCounter.html (#119) @maelle","code":""},{"path":"https://docs.ropensci.org/webmockr/news/index.html","id":"webmockr-082","dir":"Changelog","previous_headings":"","what":"webmockr 0.8.2","title":"webmockr 0.8.2","text":"CRAN release: 2022-08-28","code":""},{"path":"https://docs.ropensci.org/webmockr/news/index.html","id":"bug-fixes-0-8-2","dir":"Changelog","previous_headings":"","what":"BUG FIXES","title":"webmockr 0.8.2","text":"change UriPattern make sure regex matching working intended (#114) thanks @kenahoo","code":""},{"path":"https://docs.ropensci.org/webmockr/news/index.html","id":"webmockr-080","dir":"Changelog","previous_headings":"","what":"webmockr 0.8.0","title":"webmockr 0.8.0","text":"CRAN release: 2021-03-14","code":""},{"path":"https://docs.ropensci.org/webmockr/news/index.html","id":"new-features-0-8-0","dir":"Changelog","previous_headings":"","what":"NEW FEATURES","title":"webmockr 0.8.0","text":"enable() enable() method Adapter R6 class gain new parameter quiet toggle whether messages printed (#112)","code":""},{"path":"https://docs.ropensci.org/webmockr/news/index.html","id":"minor-improvements-0-8-0","dir":"Changelog","previous_headings":"","what":"MINOR IMPROVEMENTS","title":"webmockr 0.8.0","text":"re-create http response objects httr crul using url request object; now use url response object, url response object fall back using url request object (#110) (#113) improve docs: add explanation manual files to_raise() to_return() explain differenc may want use (#100)","code":""},{"path":"https://docs.ropensci.org/webmockr/news/index.html","id":"webmockr-074","dir":"Changelog","previous_headings":"","what":"webmockr 0.7.4","title":"webmockr 0.7.4","text":"CRAN release: 2020-12-09","code":""},{"path":"https://docs.ropensci.org/webmockr/news/index.html","id":"minor-improvements-0-7-4","dir":"Changelog","previous_headings":"","what":"MINOR IMPROVEMENTS","title":"webmockr 0.7.4","text":"support vcr able recreate httr objects fully (see github issue ropensci/vcr#132) needed handle additional parts httr request objects: fields output - change vcr return objects much closer real httr requests return (#109)","code":""},{"path":"https://docs.ropensci.org/webmockr/news/index.html","id":"bug-fixes-0-7-4","dir":"Changelog","previous_headings":"","what":"BUG FIXES","title":"webmockr 0.7.4","text":"bug fix + improvement: fixes simple authentication - wi_th() now supports basic_auth mock basic authentication either crul::auth() httr::authenticate() (#108)","code":""},{"path":"https://docs.ropensci.org/webmockr/news/index.html","id":"webmockr-070","dir":"Changelog","previous_headings":"","what":"webmockr 0.7.0","title":"webmockr 0.7.0","text":"CRAN release: 2020-09-30","code":""},{"path":"https://docs.ropensci.org/webmockr/news/index.html","id":"new-features-0-7-0","dir":"Changelog","previous_headings":"","what":"NEW FEATURES","title":"webmockr 0.7.0","text":"Gains ability define 1 returned HTTP response, order HTTP responses returned. idea Ruby webmock library, implementation different Ruby R languages different. can give one to_return() one creating stub, want return response time, can use new times parameter within to_return(). related use case (#31) can mock http retry’s using new feature (#10) (#32) (#101) Gains new function webmockr_reset() able reset stub registry request registry one function call (#97) (#101) Gains support mocking simple authentication. wi_th() now accepts basic_auth addition query, body, headers. Note authentication type ignored (#103)","code":""},{"path":"https://docs.ropensci.org/webmockr/news/index.html","id":"minor-improvements-0-7-0","dir":"Changelog","previous_headings":"","what":"MINOR IMPROVEMENTS","title":"webmockr 0.7.0","text":"change URI’s matched stub_request(): weren’t allowing matching URI’s without schemes; can now . addition, webmockr can match URI’s without “http” scheme, match scheme “https”. See UriPattern (#102) another change URI’s matched: now query params compared separately URI; note regex allowed query params (#104) - now query parameters compared code regex uri used (#107) URI matching stubs now done URI’s ; , query parameters removed comparison, base url http scheme, plus paths, compared (#107) wasn’t sure write_disk_path behavior correct using httr, seems working, added tests (#79) values query parameters given wi_th() now coerced character class make sure comparisons stubs requests done class (character) (#107)","code":""},{"path":"https://docs.ropensci.org/webmockr/news/index.html","id":"bug-fixes-0-7-0","dir":"Changelog","previous_headings":"","what":"BUG FIXES","title":"webmockr 0.7.0","text":"fix uri_regex usage stub_request(): longer curl escape uri_regex given, escape non-regex uri (#106)","code":""},{"path":"https://docs.ropensci.org/webmockr/news/index.html","id":"webmockr-062","dir":"Changelog","previous_headings":"","what":"webmockr 0.6.2","title":"webmockr 0.6.2","text":"CRAN release: 2020-03-24 change CrulAdapter: use normalizePath write_disk_path path relative paths changed full paths - added tests (#95) (#96)","code":""},{"path":"https://docs.ropensci.org/webmockr/news/index.html","id":"webmockr-060","dir":"Changelog","previous_headings":"","what":"webmockr 0.6.0","title":"webmockr 0.6.0","text":"CRAN release: 2020-03-02","code":""},{"path":"https://docs.ropensci.org/webmockr/news/index.html","id":"new-features-0-6-0","dir":"Changelog","previous_headings":"","what":"NEW FEATURES","title":"webmockr 0.6.0","text":"new Adapter class consolidate common code HttrAdapter CrulAdapter classes, inherit Adapter; user facing change (#87) pkgdown documentation site gains grouping functions help user navigate package: see https://docs.ropensci.org/webmockr/reference/ (#93)","code":""},{"path":"https://docs.ropensci.org/webmockr/news/index.html","id":"minor-improvements-0-6-0","dir":"Changelog","previous_headings":"","what":"MINOR IMPROVEMENTS","title":"webmockr 0.6.0","text":"now correctly fails informative message write_disk_path NULL user trying write disk using webmockr (#78) improve README construction; use html child details section (#81) fix matching stub matching bodies bodies JSON encoded (#82) vcr loaded real HTTP requests performed twice performed (#91) (#92)","code":""},{"path":"https://docs.ropensci.org/webmockr/news/index.html","id":"bug-fixes-0-6-0","dir":"Changelog","previous_headings":"","what":"BUG FIXES","title":"webmockr 0.6.0","text":"fix set_body() method Response class - handle cases user writing disk , handle raw bytes correctly (#80) fix to_s() method StubbedRequest class - formatting query parameters incorrectly (#83) fix BodyPattern class handle upload objects list; related issue fixed wi_th() parameter body handling upload objects (#84) (#85) httr requests failing vcr loaded, cassette inserted; fixed handle_request() skip vcr-related code unless cassette inserted (#86) (#88)","code":""},{"path":"https://docs.ropensci.org/webmockr/news/index.html","id":"webmockr-050","dir":"Changelog","previous_headings":"","what":"webmockr 0.5.0","title":"webmockr 0.5.0","text":"CRAN release: 2019-12-04","code":""},{"path":"https://docs.ropensci.org/webmockr/news/index.html","id":"new-features-0-5-0","dir":"Changelog","previous_headings":"","what":"NEW FEATURES","title":"webmockr 0.5.0","text":"webmockr now supports mocking writing disk. TLDR: see ?mocking-disk-writing get started - , major high level http clients R, crul httr, support writing directly disk (rather user manually getting http response writing disk). supporting required quite bit work, code thinking support various scenarios users can find dealing writing disk - Please get touch problems (#57) (#76) gains request_registry_clear() method easily clear requests request registry (#75)","code":""},{"path":"https://docs.ropensci.org/webmockr/news/index.html","id":"minor-improvements-0-5-0","dir":"Changelog","previous_headings":"","what":"MINOR IMPROVEMENTS","title":"webmockr 0.5.0","text":"better docs R6 classes R6 support new roxygen2 version cran (#77) httr simple auth ignored - now supported (simple auth crul already worked) (#74)","code":""},{"path":"https://docs.ropensci.org/webmockr/news/index.html","id":"bug-fixes-0-5-0","dir":"Changelog","previous_headings":"","what":"BUG FIXES","title":"webmockr 0.5.0","text":"fix handle raw responses can converted character, images; needed due issue https://github.com/ropensci/vcr/issues/112 (#72) (#73)","code":""},{"path":"https://docs.ropensci.org/webmockr/news/index.html","id":"webmockr-040","dir":"Changelog","previous_headings":"","what":"webmockr 0.4.0","title":"webmockr 0.4.0","text":"CRAN release: 2019-08-09","code":""},{"path":"https://docs.ropensci.org/webmockr/news/index.html","id":"minor-improvements-0-4-0","dir":"Changelog","previous_headings":"","what":"MINOR IMPROVEMENTS","title":"webmockr 0.4.0","text":"fix link http testing book, change ropensci ropenscilabs (#67) fixes request matching: single match types working now (e.g., just match query, just headers); addition, header matching now works; added examples single match types (#68) (#69)","code":""},{"path":"https://docs.ropensci.org/webmockr/news/index.html","id":"bug-fixes-0-4-0","dir":"Changelog","previous_headings":"","what":"BUG FIXES","title":"webmockr 0.4.0","text":"fix stub specification within crul httr adapters; typo setting headers (#70)","code":""},{"path":"https://docs.ropensci.org/webmockr/news/index.html","id":"webmockr-034","dir":"Changelog","previous_headings":"","what":"webmockr 0.3.4","title":"webmockr 0.3.4","text":"CRAN release: 2019-02-09","code":""},{"path":"https://docs.ropensci.org/webmockr/news/index.html","id":"defunct-0-3-4","dir":"Changelog","previous_headings":"","what":"DEFUNCT","title":"webmockr 0.3.4","text":"underscore methods to_return_() wi_th_() defunct (#60) (#64)","code":""},{"path":"https://docs.ropensci.org/webmockr/news/index.html","id":"new-features-0-3-4","dir":"Changelog","previous_headings":"","what":"NEW FEATURES","title":"webmockr 0.3.4","text":"to_return() gains parameter .list (#60) (#64)","code":""},{"path":"https://docs.ropensci.org/webmockr/news/index.html","id":"minor-improvements-0-3-4","dir":"Changelog","previous_headings":"","what":"MINOR IMPROVEMENTS","title":"webmockr 0.3.4","text":"typo fixes (#62) thanks @Bisaloo ! improved print method stubs, found StubbedRequest, better behavior long strings headers bodies (#63)","code":""},{"path":"https://docs.ropensci.org/webmockr/news/index.html","id":"bug-fixes-0-3-4","dir":"Changelog","previous_headings":"","what":"BUG FIXES","title":"webmockr 0.3.4","text":"fix date mocked httr response object match date format httr uses real HTTP requests (#58) (#61) via https://github.com/ropensci/vcr/issues/91 fix response headers mocked httr response objects. httr makes list headers insensitive case, now use function package (#59) (#61) to_return() wi_th() drop use lazyeval package fall back using simple list(...) - fixes problem creating stubs failing within test_that() blocks due weird lazy eval conflicts (think) (#60) (#64) thanks @karawoo !","code":""},{"path":"https://docs.ropensci.org/webmockr/news/index.html","id":"webmockr-030","dir":"Changelog","previous_headings":"","what":"webmockr 0.3.0","title":"webmockr 0.3.0","text":"CRAN release: 2019-01-09","code":""},{"path":"https://docs.ropensci.org/webmockr/news/index.html","id":"minor-improvements-0-3-0","dir":"Changelog","previous_headings":"","what":"MINOR IMPROVEMENTS","title":"webmockr 0.3.0","text":"returned mocked response headers retaining case user gave - whereas lowercased match output crul httr. now fixed. (#49) thanks @hlapp returned mocked response headers character class, depended class given user creating stub. now fixed, returning character class values response headers (#48) thanks @hlapp skip tests require vcr vcr available (#53) internal change crul adapter produce http response new version crul returns - adds response_headers_all slot (#51) (#54)","code":""},{"path":"https://docs.ropensci.org/webmockr/news/index.html","id":"webmockr-029","dir":"Changelog","previous_headings":"","what":"webmockr 0.2.9","title":"webmockr 0.2.9","text":"CRAN release: 2018-11-05","code":""},{"path":"https://docs.ropensci.org/webmockr/news/index.html","id":"minor-improvements-0-2-9","dir":"Changelog","previous_headings":"","what":"MINOR IMPROVEMENTS","title":"webmockr 0.2.9","text":"make request_registry() stub_registry() print methods similar avoid confusion users (#35) update docs enable/disable indicate crul httr supported (#46) (related #45) wrap httr adapter examples requireNamespace run httr available clean .onLoad call, removing commented code, add note creating adapter objects load crul httr packages","code":""},{"path":"https://docs.ropensci.org/webmockr/news/index.html","id":"bug-fixes-0-2-9","dir":"Changelog","previous_headings":"","what":"BUG FIXES","title":"webmockr 0.2.9","text":"fix enable() disable() methods. even though httr Suggests, loading adapters (crul, httr) stop package found. now give message skip package installed. addition, enable() disable() gain adapter parameter indicate package want enable disable. adapter given attempt adapters. Note bug shouldn’t affected vcr users httr Imports package, ’d httr installed (#45) thanks @maelle uncovering problem","code":""},{"path":"https://docs.ropensci.org/webmockr/news/index.html","id":"webmockr-028","dir":"Changelog","previous_headings":"","what":"webmockr 0.2.8","title":"webmockr 0.2.8","text":"CRAN release: 2018-10-19","code":""},{"path":"https://docs.ropensci.org/webmockr/news/index.html","id":"new-features-0-2-8","dir":"Changelog","previous_headings":"","what":"NEW FEATURES","title":"webmockr 0.2.8","text":"Added support integration package httr; see HttrAdapter details; webmockr now integrates two HTTP R packages: crul httr (#43) (#44) Along httr integration new method httr_mock() turn mocking httr; two methods build_httr_response build_httr_request meant internal use","code":""},{"path":"https://docs.ropensci.org/webmockr/news/index.html","id":"webmockr-026","dir":"Changelog","previous_headings":"","what":"webmockr 0.2.6","title":"webmockr 0.2.6","text":"CRAN release: 2018-05-17","code":""},{"path":"https://docs.ropensci.org/webmockr/news/index.html","id":"new-features-0-2-6","dir":"Changelog","previous_headings":"","what":"NEW FEATURES","title":"webmockr 0.2.6","text":"Added support integration package vcr (now CRAN) HTTP request caching","code":""},{"path":"https://docs.ropensci.org/webmockr/news/index.html","id":"webmockr-024","dir":"Changelog","previous_headings":"","what":"webmockr 0.2.4","title":"webmockr 0.2.4","text":"CRAN release: 2018-05-08","code":""},{"path":"https://docs.ropensci.org/webmockr/news/index.html","id":"new-features-0-2-4","dir":"Changelog","previous_headings":"","what":"NEW FEATURES","title":"webmockr 0.2.4","text":"New function enabled() ask webmockr enabled, gives boolean wi_th() gains new parameter .list escape hatch avoid NSE. examples added wi_th man file clarify use","code":""},{"path":"https://docs.ropensci.org/webmockr/news/index.html","id":"minor-improvements-0-2-4","dir":"Changelog","previous_headings":"","what":"MINOR IMPROVEMENTS","title":"webmockr 0.2.4","text":"matching request body supported, now ; added examples matching request body, see ?stub_request (#36) make sure adapter crul handles types matches (#29) removed internal usage pipes package. still exporting pipe users (#30) fixed internals give vcr error vcr loaded - future release vcr support (#34) require newest crul version","code":""},{"path":"https://docs.ropensci.org/webmockr/news/index.html","id":"bug-fixes-0-2-4","dir":"Changelog","previous_headings":"","what":"BUG FIXES","title":"webmockr 0.2.4","text":"Error messages suggest stub giving bodies. now give bodies needed along method, uri, headers, query (#37) Fixed Response class dealing capitalization correctly","code":""},{"path":"https://docs.ropensci.org/webmockr/news/index.html","id":"webmockr-020","dir":"Changelog","previous_headings":"","what":"webmockr 0.2.0","title":"webmockr 0.2.0","text":"CRAN release: 2018-03-02","code":""},{"path":"https://docs.ropensci.org/webmockr/news/index.html","id":"new-features-0-2-0","dir":"Changelog","previous_headings":"","what":"NEW FEATURES","title":"webmockr 0.2.0","text":"New function to_raise() say matched response return certain exception, currently to_raise accepts error classes fauxpas package (#9) New function to_timeout() say matched response return timeout. special case to_raise easily timeout expectation (#11) New function request_registry() list requests request registry (#23) package crul moved Imports Suggests ’s http client supported now. move back Suggests support least one http client webmockr_configure() changes: turn_on removed; allow_net_connect allow_localhost ignored , now used now set FALSE default; fixed usage allow now accepts character vector URLs instead boolean; following correctly marked ignored now fixed net_http_connect_on_start, show_stubbing_instructions, query_values_notation, show_body_diff (#19) (#21) webmockr_disable_net_connect() now accepts allow parameter disable connections except URLs given allow webmockr_net_connect_allowed() now accepts uri parameter test URI/URL allowed","code":""},{"path":"https://docs.ropensci.org/webmockr/news/index.html","id":"minor-improvements-0-2-0","dir":"Changelog","previous_headings":"","what":"MINOR IMPROVEMENTS","title":"webmockr 0.2.0","text":"Fixed printed stub statement printed console - weren’t including headers accurately (#18) Added examples stub_registry() stub_registry_clea() manual files (#24) internal methods build_crul_request build_crul_response moved outside CrulAdapter class can accesed like webmockr:: packages enable() disable() now return booleans invisibly General improvements documentation throughout Added linting user inputs to_return() method, docs details input method Added linting user inputs wi_th() method, docs details input method","code":""},{"path":"https://docs.ropensci.org/webmockr/news/index.html","id":"bug-fixes-0-2-0","dir":"Changelog","previous_headings":"","what":"BUG FIXES","title":"webmockr 0.2.0","text":"Fixed option allow_localhost, wasn’t actually workin (#25)","code":""},{"path":"https://docs.ropensci.org/webmockr/news/index.html","id":"deprecated-and-defunct-0-2-0","dir":"Changelog","previous_headings":"","what":"DEPRECATED AND DEFUNCT","title":"webmockr 0.2.0","text":"webmockr_enable() webmockr_disable now defunct. Use webmockr::enable() webmockr::disable() instead","code":""},{"path":"https://docs.ropensci.org/webmockr/news/index.html","id":"webmockr-010","dir":"Changelog","previous_headings":"","what":"webmockr 0.1.0","title":"webmockr 0.1.0","text":"CRAN release: 2017-05-20","code":""},{"path":"https://docs.ropensci.org/webmockr/news/index.html","id":"new-features-0-1-0","dir":"Changelog","previous_headings":"","what":"NEW FEATURES","title":"webmockr 0.1.0","text":"Released CRAN.","code":""}]
